openapi: 3.0.0
info:
  title: AUREA Backend API
  description: |
    Comprehensive Portfolio Management Platform API with 18 professional endpoints.
    
    **Features:**
    - JWT Authentication System
    - Complete Portfolio CRUD Operations
    - One-Click Vercel Deployment
    - Dynamic HTML Generation from User Data
    - Case Study Management
    - Professional Image Upload (Cloudinary)
    - Publishing System with Slug Management
    - View Tracking & Analytics
    
    **Total Endpoints: 18**
    - Authentication: 3 endpoints
    - Portfolio Management: 8 endpoints
    - Site Publishing & Deployment: 3 endpoints
    - Case Study Management: 4 endpoints
    - Image Upload: 2 endpoints
  version: 1.0.0
  contact:
    name: AUREA Development Team
  license:
    name: ISC

servers:
  - url: http://localhost:5000
    description: Development server
  - url: https://api.aurea.com
    description: Production server

tags:
  - name: Health
    description: Server health check endpoints
  - name: Authentication
    description: User registration and authentication (3 endpoints)
  - name: Portfolios
    description: Portfolio CRUD operations and publishing system (8 endpoints)
  - name: Site Publishing
    description: One-click portfolio publishing to Vercel with HTML generation (3 endpoints)
  - name: Case Studies
    description: Case study management linked to portfolios (4 endpoints)
  - name: Image Upload
    description: Upload and delete images via Cloudinary (2 endpoints)
  - name: Proposal Extraction
    description: Legacy AI-powered PDF extraction (optional feature)

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier
        name:
          type: string
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - name
        - email
    
    Portfolio:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier
        userId:
          type: string
          description: Reference to user ID
        title:
          type: string
          maxLength: 200
          description: Portfolio title
        description:
          type: string
          maxLength: 1000
          description: Portfolio description
        templateId:
          type: string
          enum: [echelon]
          description: Portfolio template identifier
        content:
          type: object
          description: Flexible portfolio content structure
        styling:
          type: object
          description: Custom styling configuration
        isPublished:
          type: boolean
          default: false
          description: Publication status
        publishedAt:
          type: string
          format: date-time
          description: First publication timestamp
        unpublishedAt:
          type: string
          format: date-time
          description: Last unpublish timestamp
        slug:
          type: string
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
          description: SEO-friendly URL slug (required for publishing)
        viewCount:
          type: number
          default: 0
          description: Number of portfolio views
        lastViewedAt:
          type: string
          format: date-time
          description: Last view timestamp
        caseStudies:
          type: array
          items:
            type: string
          description: Array of case study IDs
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - title
        - templateId
    
    CaseStudy:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier
        portfolioId:
          type: string
          description: Reference to portfolio
        userId:
          type: string
          description: Reference to user
        projectId:
          type: string
          description: Project ID from portfolio content
        content:
          type: object
          properties:
            hero:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                coverImage:
                  type: string
                client:
                  type: string
                year:
                  type: string
                role:
                  type: string
                duration:
                  type: string
            overview:
              type: object
              properties:
                heading:
                  type: string
                description:
                  type: string
                challenge:
                  type: string
                solution:
                  type: string
                results:
                  type: string
            sections:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  type:
                    type: string
                  heading:
                    type: string
                  content:
                    type: string
                  image:
                    type: string
                  images:
                    type: array
                    items:
                      type: string
                  layout:
                    type: string
            additionalContext:
              type: object
              properties:
                heading:
                  type: string
                content:
                  type: string
            nextProject:
              type: object
              properties:
                id:
                  type: string
                title:
                  type: string
                image:
                  type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - portfolioId
        - userId
        - projectId
    
    Site:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier
        portfolioId:
          type: string
          description: Reference to portfolio
        userId:
          type: string
          description: Reference to user
        subdomain:
          type: string
          description: Subdomain name (derived from designer name)
        deploymentUrl:
          type: string
          description: Live Vercel deployment URL
        deploymentId:
          type: string
          description: Vercel deployment ID
        status:
          type: string
          enum: [draft, published, unpublished]
          description: Site publication status
        filesGenerated:
          type: array
          items:
            type: string
          description: List of generated HTML files
        lastDeployedAt:
          type: string
          format: date-time
          description: Last deployment timestamp
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - portfolioId
        - userId
        - subdomain
    
    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            token:
              type: string
              description: JWT authentication token
    
    Error:
      type: object
      properties:
        success:
          type: boolean
          default: false
        message:
          type: string
          description: Error message
        error:
          type: string
          description: Detailed error information

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Check if the server is running
      tags:
        - Health
      responses:
        '200':
          description: Server is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "AUREA Backend is running"
                  timestamp:
                    type: string
                    format: date-time
                  environment:
                    type: string
                    example: "development"

  /api/auth/signup:
    post:
      summary: Register a new user
      description: Create a new user account with email and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  minimum: 6
                  example: "securepass123"
              required:
                - name
                - email
                - password
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      summary: User login
      description: Authenticate user and get JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  example: "password123"
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/me:
    get:
      summary: Get current user profile
      description: Retrieve the authenticated user's profile
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update user profile
      description: Update the authenticated user's profile
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Updated Name"
                email:
                  type: string
                  format: email
                  example: "updated@example.com"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/portfolios:
    post:
      summary: Create a new portfolio
      description: Create a new portfolio with template support
      tags:
        - Portfolios
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  maxLength: 200
                  example: "My Creative Portfolio"
                description:
                  type: string
                  maxLength: 1000
                  example: "A showcase of my best work"
                templateId:
                  type: string
                  enum: [echelon]
                  example: "echelon"
                content:
                  type: object
                  description: Portfolio content structure
                styling:
                  type: object
                  description: Custom styling configuration
              required:
                - title
                - templateId
      responses:
        '201':
          description: Portfolio created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      portfolio:
                        $ref: '#/components/schemas/Portfolio'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/portfolios/user/{userId}:
    get:
      summary: Get user's portfolios
      description: Retrieve portfolios for a specific user with filtering options
      tags:
        - Portfolios
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: User ID
        - in: query
          name: published
          schema:
            type: string
            enum: [all, true, false]
          description: Filter by publication status
        - in: query
          name: sort
          schema:
            type: string
            enum: [createdAt, updatedAt, title]
            default: createdAt
          description: Sort field
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
      responses:
        '200':
          description: Portfolios retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      portfolios:
                        type: array
                        items:
                          $ref: '#/components/schemas/Portfolio'
                      statistics:
                        type: object
                        properties:
                          total:
                            type: number
                          published:
                            type: number
                          unpublished:
                            type: number
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/portfolios/slug/{slug}/check:
    get:
      summary: Check slug availability
      description: Verify if a slug is available for use
      tags:
        - Portfolios
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
          description: Slug to check
        - in: query
          name: excludeId
          schema:
            type: string
          description: Portfolio ID to exclude from check
      responses:
        '200':
          description: Slug is available
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      available:
                        type: boolean
                      slug:
                        type: string
        '409':
          description: Slug is already taken
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      available:
                        type: boolean
                      suggestions:
                        type: array
                        items:
                          type: string
  
  /api/public/portfolio/{slug}:
    get:
      summary: Get public portfolio by slug
      description: Retrieve a published portfolio without authentication
      tags:
        - Portfolios
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
          description: Portfolio slug
      responses:
        '200':
          description: Portfolio retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Portfolio'
        '404':
          description: Portfolio not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/portfolios/{id}:
    get:
      summary: Get portfolio by ID
      description: Retrieve a specific portfolio with view tracking
      tags:
        - Portfolios
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Portfolio ID
      responses:
        '200':
          description: Portfolio retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      portfolio:
                        $ref: '#/components/schemas/Portfolio'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Portfolio not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update portfolio
      description: Update portfolio content (owner only)
      tags:
        - Portfolios
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Portfolio ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  maxLength: 200
                description:
                  type: string
                  maxLength: 1000
                content:
                  type: object
                styling:
                  type: object
                published:
                  type: boolean
                isPublic:
                  type: boolean
      responses:
        '200':
          description: Portfolio updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      portfolio:
                        $ref: '#/components/schemas/Portfolio'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Not the owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Portfolio not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete portfolio
      description: Delete a portfolio (owner only)
      tags:
        - Portfolios
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Portfolio ID
      responses:
        '200':
          description: Portfolio deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Not the owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Portfolio not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/portfolios/{id}/publish:
    put:
      summary: Publish portfolio
      description: Publish a portfolio with slug validation
      tags:
        - Portfolios
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Portfolio ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                slug:
                  type: string
                  pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
                  example: "my-creative-portfolio"
              required:
                - slug
      responses:
        '200':
          description: Portfolio published successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      portfolio:
                        type: object
                        properties:
                          _id:
                            type: string
                          isPublished:
                            type: boolean
                          slug:
                            type: string
                          publishedAt:
                            type: string
                            format: date-time
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Slug already taken
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      suggestions:
                        type: array
                        items:
                          type: string
  
  /api/portfolios/{id}/unpublish:
    put:
      summary: Unpublish portfolio
      description: Unpublish a portfolio (keeps slug for republishing)
      tags:
        - Portfolios
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Portfolio ID
      responses:
        '200':
          description: Portfolio unpublished successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      portfolio:
                        type: object
                        properties:
                          _id:
                            type: string
                          isPublished:
                            type: boolean
                          unpublishedAt:
                            type: string
                            format: date-time

  /api/portfolios/slug/{slug}:
    get:
      summary: Get portfolio by slug (DEPRECATED)
      description: Use /api/public/portfolio/{slug} instead
      deprecated: true
      tags:
        - Portfolios
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          description: Portfolio slug
          example: "john-doe-portfolio"
      responses:
        '200':
          description: Portfolio retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      portfolio:
                        $ref: '#/components/schemas/Portfolio'
        '404':
          description: Portfolio not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/case-studies:
    post:
      summary: Create a new case study
      description: Create a case study linked to a portfolio project
      tags:
        - Case Studies
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                portfolioId:
                  type: string
                  description: Portfolio ID this case study belongs to
                projectId:
                  type: string
                  description: Project ID from portfolio content
                content:
                  type: object
                  description: Case study content structure
                  properties:
                    hero:
                      type: object
                    overview:
                      type: object
                    sections:
                      type: array
                      items:
                        type: object
              required:
                - portfolioId
                - projectId
      responses:
        '201':
          description: Case study created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      caseStudy:
                        $ref: '#/components/schemas/CaseStudy'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/case-studies/{id}:
    get:
      summary: Get case study by ID
      description: Retrieve a specific case study
      tags:
        - Case Studies
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Case study ID
      responses:
        '200':
          description: Case study retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      caseStudy:
                        $ref: '#/components/schemas/CaseStudy'
        '404':
          description: Case study not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update case study
      description: Update case study content (owner only)
      tags:
        - Case Studies
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Case study ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: object
                  description: Updated case study content
      responses:
        '200':
          description: Case study updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      caseStudy:
                        $ref: '#/components/schemas/CaseStudy'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete case study
      description: Delete a case study (owner only)
      tags:
        - Case Studies
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Case study ID
      responses:
        '200':
          description: Case study deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/upload/image:
    post:
      summary: Upload image to Cloudinary
      description: Upload a single image with automatic optimization
      tags:
        - Image Upload
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file (JPG, JPEG, PNG, WebP)
              required:
                - image
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      imageUrl:
                        type: string
                        description: Cloudinary URL
                      publicId:
                        type: string
                        description: Cloudinary public ID
        '400':
          description: Invalid file or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete image from Cloudinary
      description: Remove an image using its URL or public ID
      tags:
        - Image Upload
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                imageUrl:
                  type: string
                  description: Full Cloudinary image URL
              required:
                - imageUrl
      responses:
        '200':
          description: Image deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/sites/publish:
    post:
      summary: Publish portfolio to Vercel
      description: |
        Generate HTML from portfolio data and deploy to Vercel with one click.
        
        **Complete Publishing Flow:**
        1. Extract portfolio data (about, projects, gallery, contact)
        2. Generate professional HTML files from user content
        3. Create deployment files (index.html, case-study pages)
        4. Upload to Vercel hosting
        5. Return live deployment URL
        
        **File Naming:** Files are organized by designer name from portfolio.content.about.name
        
        **What Gets Generated:**
        - index.html (main portfolio page)
        - case-study-N.html (individual project pages)
        - Responsive design for all devices
        - SEO optimized with meta tags
      tags:
        - Site Publishing
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                portfolioId:
                  type: string
                  description: Portfolio ID to publish
                  example: "507f1f77bcf86cd799439011"
              required:
                - portfolioId
      responses:
        '200':
          description: Portfolio published successfully to Vercel
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Site published successfully"
                  data:
                    type: object
                    properties:
                      site:
                        $ref: '#/components/schemas/Site'
                      deploymentUrl:
                        type: string
                        description: Live Vercel URL
                        example: "https://john-designer-xyz123.vercel.app"
                      deploymentId:
                        type: string
                        description: Vercel deployment ID
                      inspectorUrl:
                        type: string
                        description: Vercel deployment inspector URL
                      filesGenerated:
                        type: array
                        items:
                          type: string
                        example: ["index.html", "case-study-1.html", "case-study-2.html"]
        '400':
          description: Portfolio not found or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not the portfolio owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/sites/{subdomain}:
    get:
      summary: Get published site details
      description: Retrieve information about a published site by subdomain
      tags:
        - Site Publishing
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: subdomain
          required: true
          schema:
            type: string
          description: Site subdomain (designer name)
          example: "john-designer"
      responses:
        '200':
          description: Site details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Site'
        '404':
          description: Site not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/sites/debug/generate:
    post:
      summary: Test HTML generation without deployment
      description: |
        Generate HTML files from portfolio data without deploying to Vercel.
        Useful for testing and debugging the HTML generation process.
      tags:
        - Site Publishing
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                portfolioId:
                  type: string
                  description: Portfolio ID to generate HTML for
                  example: "507f1f77bcf86cd799439011"
              required:
                - portfolioId
      responses:
        '200':
          description: HTML generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      filesGenerated:
                        type: array
                        items:
                          type: string
                      outputPath:
                        type: string
                        description: Local path where files were saved
                      totalSize:
                        type: string
                        description: Total size of generated files
        '400':
          description: Portfolio not found or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/proposals/extract:
    post:
      tags:
        - Proposal Extraction
      summary: Upload and extract data from PDF proposal (Two-Step AI Processing)
      description: |
        Upload a PDF file and extract structured data using Google's GenAI library with two-step processing:
        
        **Step 1**: Complete document analysis - extracts ALL information from the document
        **Step 2**: Pricing-focused filtering - filters only pricing calculator relevant data
        
        Uses Gemini 2.5 Pro with fallback to other models (2.5 Flash, 1.5 Pro, 1.5 Flash, Pro).
        Authentication is optional - user ID will be set to 'anonymous' if not authenticated.
        
        Perfect for pricing calculator tools requiring comprehensive document analysis.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                pdf:
                  type: string
                  format: binary
                  description: PDF file to extract data from (max 10MB)
              required:
                - pdf
      responses:
        '200':
          description: PDF processed successfully with two-step analysis
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "PDF processed successfully with two-step method"
                  data:
                    type: object
                    properties:
                      step1_complete_analysis:
                        type: object
                        description: Complete document analysis with all extracted information
                        properties:
                          clientInfo:
                            type: object
                            properties:
                              name:
                                type: string
                              contact:
                                type: object
                              address:
                                type: string
                          projectDetails:
                            type: object
                            properties:
                              title:
                                type: string
                              description:
                                type: string
                              scope:
                                type: array
                                items:
                                  type: string
                          requirements:
                            type: array
                            items:
                              type: string
                          timeline:
                            type: object
                            properties:
                              startDate:
                                type: string
                              endDate:
                                type: string
                              milestones:
                                type: array
                                items:
                                  type: object
                          budget:
                            type: object
                            properties:
                              total:
                                type: number
                              currency:
                                type: string
                              breakdown:
                                type: array
                                items:
                                  type: object
                          deliverables:
                            type: array
                            items:
                              type: string
                          constraints:
                            type: array
                            items:
                              type: string
                          assumptions:
                            type: array
                            items:
                              type: string
                          risks:
                            type: array
                            items:
                              type: string
                      step2_pricing_focused:
                        type: object
                        description: Pricing calculator specific data filtered from complete analysis
                        properties:
                          requirementsComplexity:
                            type: object
                            properties:
                              level:
                                type: string
                                enum: [low, medium, high, very_high]
                              factors:
                                type: array
                                items:
                                  type: string
                          projectOverview:
                            type: object
                            properties:
                              type:
                                type: string
                              scope:
                                type: string
                              complexity:
                                type: string
                          deadlineUrgency:
                            type: object
                            properties:
                              urgency:
                                type: string
                                enum: [low, medium, high, urgent]
                              timeframe:
                                type: string
                              factors:
                                type: array
                                items:
                                  type: string
                          budgetInfo:
                            type: object
                            properties:
                              hasBudget:
                                type: boolean
                              range:
                                type: string
                              flexibility:
                                type: string
                          clientProjectInfo:
                            type: object
                            properties:
                              industry:
                                type: string
                              size:
                                type: string
                              experience:
                                type: string
                          pricingFactors:
                            type: array
                            items:
                              type: string
                  processing:
                    type: object
                    properties:
                      method:
                        type: string
                        example: "two-step"
                      step1:
                        type: string
                        example: "Complete document analysis"
                      step2:
                        type: string
                        example: "Pricing-focused filtering"
                      model_used:
                        type: string
                        example: "gemini-2.5-pro"
                      processing_time:
                        type: string
                        example: "45.2s"
                  metadata:
                    type: object
                    properties:
                      fileName:
                        type: string
                        example: "client_proposal.pdf"
                      fileSize:
                        type: number
                        example: 2048576
                      pagesProcessed:
                        type: number
                        example: 12
                      processedAt:
                        type: string
                        format: date-time
                      userId:
                        type: string
                        example: "anonymous"
                      extractionMethod:
                        type: string
                        example: "direct-pdf-text"
        '400':
          description: No file uploaded or invalid file type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Processing failed or GenAI API error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/proposals/history:
    get:
      tags:
        - Proposal Extraction
      summary: Get extraction history
      description: |
        Retrieve history of PDF extractions. Currently returns empty array.
        Authentication is optional - user ID will be set to 'anonymous' if not authenticated.
      responses:
        '200':
          description: History retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                    example: []
                  message:
                    type: string
                    example: "Extraction history retrieved successfully"
                  userId:
                    type: string
                    example: "anonymous"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/proposals/test-gemini:
    get:
      tags:
        - Proposal Extraction
      summary: Test GenAI API connection and models
      description: |
        Test the connection to Google's GenAI API using @google/genai library.
        Tests multiple Gemini models: 2.5 Pro, 2.5 Flash, 1.5 Pro, 1.5 Flash, Pro.
        Returns detailed information about working models and API status.
        Authentication is optional - user ID will be set to 'anonymous' if not authenticated.
      responses:
        '200':
          description: GenAI API connection successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Google GenAI connection successful! 3 model(s) working."
                  data:
                    type: object
                    properties:
                      results:
                        type: array
                        items:
                          type: object
                          properties:
                            model:
                              type: string
                              example: "gemini-2.5-pro"
                            success:
                              type: boolean
                              example: true
                            response:
                              type: string
                              example: "Hello! I'm Gemini, ready to help with AI tasks."
                            error:
                              type: string
                              nullable: true
                        example:
                          - model: "gemini-2.5-pro"
                            success: true
                            response: "Hello! I'm Gemini, ready to help with AI tasks."
                            error: null
                          - model: "gemini-2.5-flash"
                            success: true
                            response: "Hello! I'm Gemini Flash, ready for quick responses."
                            error: null
                          - model: "gemini-1.5-pro"
                            success: false
                            response: null
                            error: "Quota exceeded"
                      workingModels:
                        type: array
                        items:
                          type: string
                        example: ["gemini-2.5-pro", "gemini-2.5-flash"]
                      apiKeyConfigured:
                        type: boolean
                        example: true
                      library:
                        type: string
                        example: "@google/genai"
                      userId:
                        type: string
                        example: "anonymous"
                      testedAt:
                        type: string
                        format: date-time
                        example: "2024-01-26T10:15:30.000Z"
        '500':
          description: GenAI API connection failed or API key missing
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Google GenAI connection failed"
                  error:
                    type: string
                    example: "API key not configured"
                  data:
                    type: object
                    properties:
                      apiKeyConfigured:
                        type: boolean
                        example: false
                      library:
                        type: string
                        example: "@google/genai"
