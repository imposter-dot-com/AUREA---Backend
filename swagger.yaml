openapi: 3.0.0
info:
  title: AUREA Backend API
  description: Portfolio Builder Platform API with MongoDB Atlas integration
  version: 1.0.0
  contact:
    name: AUREA Team
    email: support@aurea.com
  license:
    name: ISC

servers:
  - url: http://localhost:5000
    description: Development server
  - url: https://api.aurea.com
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier
        name:
          type: string
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - name
        - email
    
    Portfolio:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier
        title:
          type: string
          description: Portfolio title
        description:
          type: string
          description: Portfolio description
        template:
          type: string
          description: Portfolio template name
          example: minimal-designer
        sections:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                description: Section type
                enum: [hero, about, projects, contact]
              content:
                type: object
                description: Section content based on type
                properties:
                  name:
                    type: string
                    description: Name (hero section)
                  title:
                    type: string
                    description: Professional title (hero section)
                  description:
                    type: string
                    description: Description text
                  image:
                    type: string
                    description: Cloudinary image URL
                  skills:
                    type: array
                    items:
                      type: string
                    description: Skills list (about section)
                  social_links:
                    type: array
                    items:
                      type: object
                      properties:
                        platform:
                          type: string
                        url:
                          type: string
                    description: Social media links (contact section)
        styling:
          type: object
          properties:
            colors:
              type: object
              properties:
                primary:
                  type: string
                  example: "#1f2937"
                secondary:
                  type: string
                  example: "#6b7280"
                accent:
                  type: string
                  example: "#3b82f6"
                background:
                  type: string
                  example: "#ffffff"
                surface:
                  type: string
                  example: "#f8fafc"
                text:
                  type: string
                  example: "#1f2937"
                textSecondary:
                  type: string
                  example: "#6b7280"
            fonts:
              type: object
              properties:
                heading:
                  type: string
                  example: "Inter"
                body:
                  type: string
                  example: "Inter"
                accent:
                  type: string
                  example: "Inter"
            spacing:
              type: object
            borderRadius:
              type: object
            shadows:
              type: object
        published:
          type: boolean
          description: Whether portfolio is published
        isPublic:
          type: boolean
          description: Whether portfolio is public
        slug:
          type: string
          description: SEO-friendly URL slug
        url:
          type: string
          description: Portfolio URL path
        viewCount:
          type: number
          description: Number of portfolio views
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - title
        - template

    Site:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier
        userId:
          type: string
          description: Reference to user ID
        portfolioId:
          type: string
          description: Reference to portfolio ID
        subdomain:
          type: string
          description: Unique subdomain for the site
          example: my-awesome-portfolio
        customDomain:
          type: string
          description: Optional custom domain
          example: www.myportfolio.com
        deploymentId:
          type: string
          description: Vercel deployment ID
        vercelUrl:
          type: string
          description: Generated Vercel URL
          example: https://my-awesome-portfolio.vercel.app
        status:
          type: string
          enum: [deployed, failed, pending]
          description: Deployment status
        isActive:
          type: boolean
          description: Whether site is active
        lastDeployed:
          type: string
          format: date-time
          description: Last deployment timestamp
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - subdomain
        - portfolioId

    PublishRequest:
      type: object
      properties:
        portfolioId:
          type: string
          description: ID of portfolio to publish
          example: 60f7b1234567890abcdef123
        customDomain:
          type: string
          description: Optional custom domain
          example: www.myportfolio.com
      required:
        - portfolioId

    PublishResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Portfolio published successfully!
        data:
          type: object
          properties:
            site:
              type: object
              properties:
                id:
                  type: string
                  example: 60f7b1234567890abcdef456
                subdomain:
                  type: string
                  example: my-awesome-portfolio
                url:
                  type: string
                  example: /portfolio/my-awesome-portfolio
                vercelUrl:
                  type: string
                  example: https://my-awesome-portfolio.vercel.app
                customDomain:
                  type: string
                  example: www.myportfolio.com
                deploymentId:
                  type: string
                  example: deployment-12345
            portfolio:
              type: object
              properties:
                id:
                  type: string
                  example: 60f7b1234567890abcdef123
                title:
                  type: string
                  example: John Doe's Portfolio
                published:
                  type: boolean
                  example: true
            files:
              type: object
              properties:
                generated:
                  type: number
                  example: 3
                totalSize:
                  type: number
                  example: 15724
                directory:
                  type: string
                  example: /generated-files/my-awesome-portfolio
            deployment:
              type: object
              description: Deployment details and metadata
            vercel:
              type: object
              description: Vercel deployment information
    
    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            token:
              type: string
              description: JWT authentication token
    
    Error:
      type: object
      properties:
        success:
          type: boolean
          default: false
        message:
          type: string
          description: Error message
        error:
          type: string
          description: Detailed error information

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Check if the server is running
      tags:
        - Health
      responses:
        '200':
          description: Server is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "AUREA Backend is running"
                  timestamp:
                    type: string
                    format: date-time
                  environment:
                    type: string
                    example: "development"

  /api/auth/signup:
    post:
      summary: Register a new user
      description: Create a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  minimum: 6
                  example: "password123"
              required:
                - name
                - email
                - password
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      summary: User login
      description: Authenticate user and get JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  example: "password123"
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/me:
    get:
      summary: Get current user profile
      description: Retrieve the authenticated user's profile
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update user profile
      description: Update the authenticated user's profile
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Updated Name"
                email:
                  type: string
                  format: email
                  example: "updated@example.com"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/portfolios:
    post:
      summary: Create a new portfolio
      description: Create a new portfolio for the authenticated user
      tags:
        - Portfolios
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "My UI/UX Portfolio"
                template:
                  type: string
                  example: "modern"
                sections:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        example: "about"
                      content:
                        type: object
                        example:
                          text: "About me..."
                          image: "profile.jpg"
              required:
                - title
                - template
      responses:
        '201':
          description: Portfolio created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      portfolio:
                        $ref: '#/components/schemas/Portfolio'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/portfolios/me:
    get:
      summary: Get current user's portfolios
      description: Retrieve all portfolios for the authenticated user
      tags:
        - Portfolios
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Portfolios retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      portfolios:
                        type: array
                        items:
                          $ref: '#/components/schemas/Portfolio'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/portfolios/public:
    get:
      summary: Get public portfolios
      description: Retrieve all public portfolios
      tags:
        - Portfolios
      responses:
        '200':
          description: Public portfolios retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      portfolios:
                        type: array
                        items:
                          $ref: '#/components/schemas/Portfolio'

  /api/portfolios/{id}:
    get:
      summary: Get portfolio by ID
      description: Retrieve a specific portfolio by its ID
      tags:
        - Portfolios
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Portfolio ID
      responses:
        '200':
          description: Portfolio retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      portfolio:
                        $ref: '#/components/schemas/Portfolio'
        '404':
          description: Portfolio not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update portfolio
      description: Update a portfolio (owner only)
      tags:
        - Portfolios
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Portfolio ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                template:
                  type: string
                sections:
                  type: array
                  items:
                    type: object
                published:
                  type: boolean
                isPublic:
                  type: boolean
      responses:
        '200':
          description: Portfolio updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      portfolio:
                        $ref: '#/components/schemas/Portfolio'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Not the owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Portfolio not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete portfolio
      description: Delete a portfolio (owner only)
      tags:
        - Portfolios
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Portfolio ID
      responses:
        '200':
          description: Portfolio deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Not the owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Portfolio not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/portfolios/slug/{slug}:
    get:
      summary: Get portfolio by slug
      description: Retrieve a portfolio by its SEO-friendly slug
      tags:
        - Portfolios
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          description: Portfolio slug
          example: "john-doe-portfolio"
      responses:
        '200':
          description: Portfolio retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      portfolio:
                        $ref: '#/components/schemas/Portfolio'
        '404':
          description: Portfolio not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/site/publish:
    post:
      summary: Publish portfolio as a website
      description: Generate HTML files and deploy portfolio to a live website with Vercel integration. Subdomain is automatically generated from user's name in hero section.
      tags:
        - Site Publishing
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishRequest'
      responses:
        '200':
          description: Portfolio published successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishResponse'
        '400':
          description: Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Portfolio not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error during deployment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/site/debug-generate:
    post:
      summary: Generate HTML files for portfolio (debug mode)
      description: Generate HTML files for a portfolio without deploying, for testing and debugging purposes
      tags:
        - Site Publishing
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                portfolioId:
                  type: string
                  description: ID of portfolio to generate HTML for
                  example: 60f7b1234567890abcdef123
              required:
                - portfolioId
      responses:
        '200':
          description: HTML generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: HTML generated successfully
                  data:
                    type: object
                    properties:
                      html:
                        type: string
                        description: Generated HTML content
                      portfolio:
                        type: object
                        properties:
                          id:
                            type: string
                          title:
                            type: string
                          template:
                            type: string
                      files:
                        type: object
                        properties:
                          generated:
                            type: number
                            example: 1
                          totalSize:
                            type: number
                            example: 15724
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Portfolio not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/site/user-sites:
    get:
      summary: Get user's published sites
      description: Retrieve all sites published by the authenticated user
      tags:
        - Site Publishing
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sites retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      sites:
                        type: array
                        items:
                          $ref: '#/components/schemas/Site'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/site/{siteId}:
    get:
      summary: Get site details
      description: Retrieve details of a specific published site
      tags:
        - Site Publishing
      security:
        - bearerAuth: []
      parameters:
        - name: siteId
          in: path
          required: true
          schema:
            type: string
          description: Site ID
      responses:
        '200':
          description: Site details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      site:
                        $ref: '#/components/schemas/Site'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Site not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update site
      description: Update site configuration or redeploy with latest portfolio changes
      tags:
        - Site Publishing
      security:
        - bearerAuth: []
      parameters:
        - name: siteId
          in: path
          required: true
          schema:
            type: string
          description: Site ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customDomain:
                  type: string
                  description: Update custom domain
                  example: www.myportfolio.com
                isActive:
                  type: boolean
                  description: Activate or deactivate site
                redeploy:
                  type: boolean
                  description: Trigger redeployment with latest portfolio data
                  example: true
      responses:
        '200':
          description: Site updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      site:
                        $ref: '#/components/schemas/Site'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Site not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete site
      description: Delete a published site and remove it from deployment
      tags:
        - Site Publishing
      security:
        - bearerAuth: []
      parameters:
        - name: siteId
          in: path
          required: true
          schema:
            type: string
          description: Site ID
      responses:
        '200':
          description: Site deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example: Site deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Site not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/proposals/extract:
    post:
      tags:
        - Proposal Extraction
      summary: Upload and extract data from PDF proposal (Two-Step AI Processing)
      description: |
        Upload a PDF file and extract structured data using Google's GenAI library with two-step processing:
        
        **Step 1**: Complete document analysis - extracts ALL information from the document
        **Step 2**: Pricing-focused filtering - filters only pricing calculator relevant data
        
        Uses Gemini 2.5 Pro with fallback to other models (2.5 Flash, 1.5 Pro, 1.5 Flash, Pro).
        Authentication is optional - user ID will be set to 'anonymous' if not authenticated.
        
        Perfect for pricing calculator tools requiring comprehensive document analysis.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                pdf:
                  type: string
                  format: binary
                  description: PDF file to extract data from (max 10MB)
              required:
                - pdf
      responses:
        '200':
          description: PDF processed successfully with two-step analysis
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "PDF processed successfully with two-step method"
                  data:
                    type: object
                    properties:
                      step1_complete_analysis:
                        type: object
                        description: Complete document analysis with all extracted information
                        properties:
                          clientInfo:
                            type: object
                            properties:
                              name:
                                type: string
                              contact:
                                type: object
                              address:
                                type: string
                          projectDetails:
                            type: object
                            properties:
                              title:
                                type: string
                              description:
                                type: string
                              scope:
                                type: array
                                items:
                                  type: string
                          requirements:
                            type: array
                            items:
                              type: string
                          timeline:
                            type: object
                            properties:
                              startDate:
                                type: string
                              endDate:
                                type: string
                              milestones:
                                type: array
                                items:
                                  type: object
                          budget:
                            type: object
                            properties:
                              total:
                                type: number
                              currency:
                                type: string
                              breakdown:
                                type: array
                                items:
                                  type: object
                          deliverables:
                            type: array
                            items:
                              type: string
                          constraints:
                            type: array
                            items:
                              type: string
                          assumptions:
                            type: array
                            items:
                              type: string
                          risks:
                            type: array
                            items:
                              type: string
                      step2_pricing_focused:
                        type: object
                        description: Pricing calculator specific data filtered from complete analysis
                        properties:
                          requirementsComplexity:
                            type: object
                            properties:
                              level:
                                type: string
                                enum: [low, medium, high, very_high]
                              factors:
                                type: array
                                items:
                                  type: string
                          projectOverview:
                            type: object
                            properties:
                              type:
                                type: string
                              scope:
                                type: string
                              complexity:
                                type: string
                          deadlineUrgency:
                            type: object
                            properties:
                              urgency:
                                type: string
                                enum: [low, medium, high, urgent]
                              timeframe:
                                type: string
                              factors:
                                type: array
                                items:
                                  type: string
                          budgetInfo:
                            type: object
                            properties:
                              hasBudget:
                                type: boolean
                              range:
                                type: string
                              flexibility:
                                type: string
                          clientProjectInfo:
                            type: object
                            properties:
                              industry:
                                type: string
                              size:
                                type: string
                              experience:
                                type: string
                          pricingFactors:
                            type: array
                            items:
                              type: string
                  processing:
                    type: object
                    properties:
                      method:
                        type: string
                        example: "two-step"
                      step1:
                        type: string
                        example: "Complete document analysis"
                      step2:
                        type: string
                        example: "Pricing-focused filtering"
                      model_used:
                        type: string
                        example: "gemini-2.5-pro"
                      processing_time:
                        type: string
                        example: "45.2s"
                  metadata:
                    type: object
                    properties:
                      fileName:
                        type: string
                        example: "client_proposal.pdf"
                      fileSize:
                        type: number
                        example: 2048576
                      pagesProcessed:
                        type: number
                        example: 12
                      processedAt:
                        type: string
                        format: date-time
                      userId:
                        type: string
                        example: "anonymous"
                      extractionMethod:
                        type: string
                        example: "direct-pdf-text"
        '400':
          description: No file uploaded or invalid file type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Processing failed or GenAI API error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/proposals/history:
    get:
      tags:
        - Proposal Extraction
      summary: Get extraction history
      description: |
        Retrieve history of PDF extractions. Currently returns empty array.
        Authentication is optional - user ID will be set to 'anonymous' if not authenticated.
      responses:
        '200':
          description: History retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                    example: []
                  message:
                    type: string
                    example: "Extraction history retrieved successfully"
                  userId:
                    type: string
                    example: "anonymous"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/proposals/test-gemini:
    get:
      tags:
        - Proposal Extraction
      summary: Test GenAI API connection and models
      description: |
        Test the connection to Google's GenAI API using @google/genai library.
        Tests multiple Gemini models: 2.5 Pro, 2.5 Flash, 1.5 Pro, 1.5 Flash, Pro.
        Returns detailed information about working models and API status.
        Authentication is optional - user ID will be set to 'anonymous' if not authenticated.
      responses:
        '200':
          description: GenAI API connection successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Google GenAI connection successful! 3 model(s) working."
                  data:
                    type: object
                    properties:
                      results:
                        type: array
                        items:
                          type: object
                          properties:
                            model:
                              type: string
                              example: "gemini-2.5-pro"
                            success:
                              type: boolean
                              example: true
                            response:
                              type: string
                              example: "Hello! I'm Gemini, ready to help with AI tasks."
                            error:
                              type: string
                              nullable: true
                        example:
                          - model: "gemini-2.5-pro"
                            success: true
                            response: "Hello! I'm Gemini, ready to help with AI tasks."
                            error: null
                          - model: "gemini-2.5-flash"
                            success: true
                            response: "Hello! I'm Gemini Flash, ready for quick responses."
                            error: null
                          - model: "gemini-1.5-pro"
                            success: false
                            response: null
                            error: "Quota exceeded"
                      workingModels:
                        type: array
                        items:
                          type: string
                        example: ["gemini-2.5-pro", "gemini-2.5-flash"]
                      apiKeyConfigured:
                        type: boolean
                        example: true
                      library:
                        type: string
                        example: "@google/genai"
                      userId:
                        type: string
                        example: "anonymous"
                      testedAt:
                        type: string
                        format: date-time
                        example: "2024-01-26T10:15:30.000Z"
        '500':
          description: GenAI API connection failed or API key missing
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Google GenAI connection failed"
                  error:
                    type: string
                    example: "API key not configured"
                  data:
                    type: object
                    properties:
                      apiKeyConfigured:
                        type: boolean
                        example: false
                      library:
                        type: string
                        example: "@google/genai"

  /api/site/status:
    get:
      tags:
        - Site Publishing
      summary: Get deployment status and analytics
      description: |
        Retrieve current deployment status, published URL, build logs, and site analytics.
        **Authentication required** - returns user's site information.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Site status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                        enum: [draft, building, published, error]
                        example: "published"
                      url:
                        type: string
                        example: "https://aurea-portfolio-64f5a1b2c3d4e5f6.vercel.app"
                      lastPublished:
                        type: string
                        format: date-time
                        example: "2024-01-26T14:30:00.000Z"
                      buildLogs:
                        type: array
                        items:
                          type: object
                          properties:
                            timestamp:
                              type: string
                              format: date-time
                            message:
                              type: string
                            level:
                              type: string
                              enum: [info, warn, error]
                        example:
                          - timestamp: "2024-01-26T14:29:45.000Z"
                            message: "Starting deployment..."
                            level: "info"
                          - timestamp: "2024-01-26T14:30:00.000Z"
                            message: "Deployment successful"
                            level: "info"
                      analytics:
                        type: object
                        properties:
                          views:
                            type: number
                            example: 156
                          lastViewed:
                            type: string
                            format: date-time
                            example: "2024-01-26T16:45:30.000Z"
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No site configuration found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/site/config:
    get:
      tags:
        - Site Publishing
      summary: Get site configuration
      description: |
        Retrieve current site configuration including theme, colors, fonts, and sections.
        **Authentication required** - returns user's site configuration.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Site configuration retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      config:
                        type: object
                        properties:
                          title:
                            type: string
                            example: "John Doe Portfolio"
                          description:
                            type: string
                            example: "Full-stack developer and UI/UX designer"
                          theme:
                            type: string
                            enum: [modern, classic, minimal, creative]
                            example: "modern"
                          colors:
                            type: object
                            properties:
                              primary:
                                type: string
                                example: "#3b82f6"
                              secondary:
                                type: string
                                example: "#1f2937"
                              accent:
                                type: string
                                example: "#f59e0b"
                              background:
                                type: string
                                example: "#ffffff"
                              text:
                                type: string
                                example: "#1f2937"
                          fonts:
                            type: object
                            properties:
                              heading:
                                type: string
                                example: "Inter"
                              body:
                                type: string
                                example: "Inter"
                          sections:
                            type: array
                            items:
                              type: object
                              properties:
                                type:
                                  type: string
                                  enum: [hero, about, projects, skills, contact, custom]
                                title:
                                  type: string
                                content:
                                  type: object
                                order:
                                  type: number
                                visible:
                                  type: boolean
                      deployment:
                        type: object
                        properties:
                          status:
                            type: string
                            enum: [draft, building, published, error]
                          url:
                            type: string
                          lastPublished:
                            type: string
                            format: date-time
    
    put:
      tags:
        - Site Publishing
      summary: Update site configuration
      description: |
        Update site configuration including theme, colors, fonts, and custom CSS.
        **Authentication required** - can only update own site configuration.
        Changes require republishing to take effect on live site.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                config:
                  type: object
                  properties:
                    title:
                      type: string
                      example: "Updated Portfolio Title"
                    description:
                      type: string
                      example: "Updated description"
                    theme:
                      type: string
                      enum: [modern, classic, minimal, creative]
                      example: "minimal"
                    colors:
                      type: object
                      properties:
                        primary:
                          type: string
                          example: "#000000"
                        secondary:
                          type: string
                          example: "#333333"
                        accent:
                          type: string
                          example: "#666666"
                        background:
                          type: string
                          example: "#ffffff"
                        text:
                          type: string
                          example: "#333333"
                    fonts:
                      type: object
                      properties:
                        heading:
                          type: string
                          example: "Roboto"
                        body:
                          type: string
                          example: "Open Sans"
                    customCSS:
                      type: string
                      example: ".custom-class { margin-bottom: 2rem; }"
      responses:
        '200':
          description: Configuration updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Site configuration updated successfully"
                  data:
                    type: object
                    properties:
                      config:
                        type: object
                        description: Updated site configuration

  /api/site/analytics/view:
    post:
      tags:
        - Site Publishing
      summary: Track site view (Public endpoint)
      description: |
        Track a view on a published portfolio site. This is a public endpoint
        called automatically by published sites for analytics tracking.
        **No authentication required** - used by published sites.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  example: "https://aurea-portfolio-64f5a1b2c3d4e5f6.vercel.app"
              required:
                - url
      responses:
        '200':
          description: View tracked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "View tracked successfully"
        '400':
          description: URL missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

tags:
  - name: Health
    description: Server health check endpoints
  - name: Authentication
    description: User authentication and profile management
  - name: Portfolios
    description: Portfolio CRUD operations and management
  - name: Proposal Extraction
    description: |
      PDF proposal processing and data extraction using Google's Gemini AI.
      Features dual implementation with @google/generative-ai and @google/genai libraries.
      Supports Gemini 2.5 Pro, 1.5 Pro, and 1.5 Flash models with automatic fallback.
      Authentication optional - works with or without JWT tokens.
  - name: Site Publishing
    description: |
      Portfolio publishing and deployment system powered by Vercel.
      Convert portfolio data into modern static websites with live URLs.
      Features responsive design, multiple themes, analytics, and SEO optimization.
      Authentication required for publishing operations.