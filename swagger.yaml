openapi: 3.0.3
info:
  title: AUREA Portfolio Management API
  description: |
    # AUREA Backend API
    
    Professional portfolio creation and deployment platform with dynamic templates,
    intelligent case study management, and one-click publishing.
    
    ## Core Capabilities
    
    - üîê **Authentication & Authorization** - JWT-based secure authentication
    - üë§ **User Management** - Complete profile and subscription management
    - üìÅ **Portfolio System** - Dynamic template-based portfolio creation
    - üé® **Template Engine** - Schema-driven template system with validation
    - üìù **Case Studies** - Smart content transformation and management
    - üöÄ **Publishing** - Local and Vercel deployment with custom subdomains
    - üñºÔ∏è **Media Management** - Cloudinary integration for image uploads
    - üìÑ **PDF Export** - High-quality PDF generation with Puppeteer
    - ü§ñ **AI Extraction** - Optional AI-powered proposal extraction
    
    ## API Standards
    
    - RESTful architecture following OpenAPI 3.0.3 specification
    - JSON request/response format
    - JWT Bearer token authentication
    - Comprehensive error responses with standard HTTP status codes
    - Rate limiting and security middleware
    - CORS enabled for cross-origin requests
    
    ## Base URL
    
    **Development**: `http://localhost:5000`  
    **Production**: `https://api.aurea.com`
    
    ## Authentication
    
    Most endpoints require authentication using JWT Bearer tokens.
    Include the token in the Authorization header:
    
    ```
    Authorization: Bearer <your_jwt_token>
    ```
    
    Obtain tokens through the `/api/auth/login` or `/api/auth/signup` endpoints.
    
  version: 1.0.0
  termsOfService: https://aurea.com/terms
  contact:
    name: AUREA API Support
    email: api-support@aurea.com
    url: https://aurea.com/support
  license:
    name: ISC License
    url: https://opensource.org/licenses/ISC
  x-logo:
    url: https://aurea.com/logo.png
    altText: AUREA Logo

servers:
  - url: http://localhost:5000
    description: Local Development Server
    variables:
      port:
        default: '5000'
        description: Server port number
  - url: https://api.aurea.com
    description: Production API Server
  - url: https://staging-api.aurea.com
    description: Staging API Server (for testing)

tags:
  - name: Health
    description: API health and status monitoring
    externalDocs:
      description: Learn more about health checks
      url: https://docs.aurea.com/health
      
  - name: Authentication
    description: |
      User authentication and session management
      
      **Endpoints**: 4  
      **Authentication**: Not required (except `/me` endpoints)
    externalDocs:
      description: Authentication Guide
      url: https://docs.aurea.com/auth
      
  - name: User Management
    description: |
      User profile, account settings, and subscription management
      
      **Endpoints**: 14  
      **Authentication**: Required
    externalDocs:
      description: User Management Guide
      url: https://docs.aurea.com/users
      
  - name: Portfolios
    description: |
      Portfolio creation, management, and publishing
      
      **Endpoints**: 10  
      **Authentication**: Required (except public endpoints)
    externalDocs:
      description: Portfolio Guide
      url: https://docs.aurea.com/portfolios
      
  - name: Templates
    description: |
      Template discovery, validation, and management
      
      **Endpoints**: 11  
      **Authentication**: Mixed (some require admin)
      
      Provides schema-driven templates with validation, versioning, and rating system.
    externalDocs:
      description: Template System Guide
      url: https://docs.aurea.com/templates
      
  - name: Site Publishing
    description: |
      Portfolio publishing and deployment services
      
      **Endpoints**: 11  
      **Authentication**: Required (except public views)
      
      Supports local HTML generation and Vercel deployment with custom subdomains.
    externalDocs:
      description: Publishing Guide
      url: https://docs.aurea.com/publishing
      
  - name: Case Studies
    description: |
      Case study creation and management
      
      **Endpoints**: 6  
      **Authentication**: Required (except public endpoints)
      
      Features intelligent content transformation and responsive HTML generation.
    externalDocs:
      description: Case Study Guide
      url: https://docs.aurea.com/case-studies
      
  - name: Image Upload
    description: |
      Image upload and management via Cloudinary
      
      **Endpoints**: 2  
      **Authentication**: Required
    externalDocs:
      description: Media Upload Guide
      url: https://docs.aurea.com/uploads
      
  - name: PDF Export
    description: |
      PDF generation and export services
      
      **Endpoints**: 5  
      **Authentication**: Optional (public for published portfolios)
      
      Supports customizable formats, orientations, and styling preservation.
    externalDocs:
      description: PDF Export Guide
      url: https://docs.aurea.com/pdf-export
      
  - name: Proposal Extraction
    description: |
      AI-powered proposal extraction (Optional Feature)
      
      **Endpoints**: 3  
      **Authentication**: Required
      
      Uses Google Gemini AI for intelligent PDF content extraction.
    externalDocs:
      description: AI Extraction Guide
      url: https://docs.aurea.com/ai-extraction

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier
        name:
          type: string
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        isPremium:
          type: boolean
          default: false
          description: Premium subscription status
        premiumType:
          type: string
          enum: [none, monthly, yearly, lifetime]
          default: none
          description: Type of premium subscription
        premiumStartDate:
          type: string
          format: date-time
          nullable: true
          description: When premium subscription started
        premiumEndDate:
          type: string
          format: date-time
          nullable: true
          description: When premium subscription ends (null for lifetime)
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - name
        - email
    
    Portfolio:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier
        userId:
          type: string
          description: Reference to user ID
        title:
          type: string
          maxLength: 200
          description: Portfolio title
        description:
          type: string
          maxLength: 1000
          description: Portfolio description
        templateId:
          type: string
          enum: [echelon]
          description: Portfolio template identifier
        content:
          type: object
          description: Flexible portfolio content structure
        styling:
          type: object
          description: Custom styling configuration
        isPublished:
          type: boolean
          default: false
          description: Publication status
        publishedAt:
          type: string
          format: date-time
          description: First publication timestamp
        unpublishedAt:
          type: string
          format: date-time
          description: Last unpublish timestamp
        slug:
          type: string
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
          description: SEO-friendly URL slug (required for publishing)
        viewCount:
          type: number
          default: 0
          description: Number of portfolio views
        lastViewedAt:
          type: string
          format: date-time
          description: Last view timestamp
        caseStudies:
          type: array
          items:
            type: string
          description: Array of case study IDs
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - title
        - templateId
    
    CaseStudy:
      type: object
      description: |
        Case study with structured content that transforms to responsive HTML.
        
        **Smart Transformation Features:**
        - Detects real vs template/default data automatically
        - Uses database content when available (title, description, sections)
        - Falls back to professional defaults when fields are empty
        - Generates mobile-optimized responsive HTML pages
        - Projects with case studies get hasCaseStudy: true flag
        
        **Content Guidelines:**
        - hero.title: Main project title (avoid "My First Project" for real content)
        - overview.description: Project overview (avoid "Add a description...")
        - sections: Array of content blocks with headings and content
        - Empty/default values trigger intelligent fallbacks
      properties:
        _id:
          type: string
          description: Unique identifier
        portfolioId:
          type: string
          description: Reference to portfolio
        userId:
          type: string
          description: Reference to user
        projectId:
          type: string
          description: Project ID from portfolio content
        content:
          type: object
          properties:
            hero:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                coverImage:
                  type: string
                client:
                  type: string
                year:
                  type: string
                role:
                  type: string
                duration:
                  type: string
            overview:
              type: object
              properties:
                heading:
                  type: string
                description:
                  type: string
                challenge:
                  type: string
                solution:
                  type: string
                results:
                  type: string
            sections:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  type:
                    type: string
                  heading:
                    type: string
                  content:
                    type: string
                  image:
                    type: string
                  images:
                    type: array
                    items:
                      type: string
                  layout:
                    type: string
            additionalContext:
              type: object
              properties:
                heading:
                  type: string
                content:
                  type: string
            nextProject:
              type: object
              properties:
                id:
                  type: string
                title:
                  type: string
                image:
                  type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - portfolioId
        - userId
        - projectId
    
    Site:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier
        portfolioId:
          type: string
          description: Reference to portfolio
        userId:
          type: string
          description: Reference to user
        subdomain:
          type: string
          description: Subdomain name (derived from designer name)
        deploymentUrl:
          type: string
          description: Live Vercel deployment URL
        deploymentId:
          type: string
          description: Vercel deployment ID
        status:
          type: string
          enum: [draft, published, unpublished]
          description: Site publication status
        filesGenerated:
          type: array
          items:
            type: string
          description: List of generated HTML files
        lastDeployedAt:
          type: string
          format: date-time
          description: Last deployment timestamp
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - portfolioId
        - userId
        - subdomain
    
    Template:
      type: object
      description: Portfolio template with dynamic schema validation
      properties:
        _id:
          type: string
          description: Unique identifier
        templateId:
          type: string
          description: Unique template identifier (e.g., 'echelon', 'modern-portfolio')
        name:
          type: string
          description: Display name of the template
        slug:
          type: string
          description: URL-friendly template name
        description:
          type: string
          description: Template description
        category:
          type: string
          description: Template category (e.g., 'modern', 'minimal', 'creative')
        tags:
          type: array
          items:
            type: string
          description: Searchable tags
        schema:
          type: object
          description: Template structure definition with sections and fields
          properties:
            sections:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  type:
                    type: string
                  variant:
                    type: string
                  name:
                    type: string
                  required:
                    type: boolean
                  order:
                    type: number
                  fields:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        type:
                          type: string
                        label:
                          type: string
                        placeholder:
                          type: string
                        required:
                          type: boolean
                        validation:
                          type: object
        caseStudySchema:
          type: object
          description: Case study template schema
        thumbnail:
          type: string
          description: Template preview image URL
        previewImages:
          type: array
          items:
            type: string
          description: Additional preview images
        demoUrl:
          type: string
          description: Live demo URL
        version:
          type: string
          description: Semantic version (e.g., '1.0.0')
        versionHistory:
          type: array
          items:
            type: object
            properties:
              version:
                type: string
              schema:
                type: object
              changelog:
                type: string
              createdAt:
                type: string
                format: date-time
        features:
          type: array
          items:
            type: string
          description: Template features list
        isActive:
          type: boolean
          default: true
          description: Whether template is active/visible
        isDefault:
          type: boolean
          default: false
          description: Whether this is the default template
        isPremium:
          type: boolean
          default: false
          description: Whether template requires premium subscription
        usageCount:
          type: number
          default: 0
          description: Number of times template has been used
        rating:
          type: object
          properties:
            average:
              type: number
              minimum: 1
              maximum: 5
              description: Average rating (1-5)
            count:
              type: number
              description: Number of ratings
        createdBy:
          type: string
          description: Admin user ID who created the template
        updatedBy:
          type: string
          description: Admin user ID who last updated the template
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - templateId
        - name
        - schema
    
    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            token:
              type: string
              description: JWT authentication token
    
    UserProfile:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier
        name:
          type: string
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        stats:
          type: object
          properties:
            totalPortfolios:
              type: integer
              description: Total number of portfolios
            publishedPortfolios:
              type: integer
              description: Number of published portfolios
            draftPortfolios:
              type: integer
              description: Number of draft portfolios
            caseStudies:
              type: integer
              description: Total number of case studies
    
    # ==================== Common Response Schemas ====================
    
    SuccessResponse:
      type: object
      description: Standard success response wrapper
      properties:
        success:
          type: boolean
          example: true
          description: Indicates successful operation
        message:
          type: string
          example: "Operation completed successfully"
          description: Human-readable success message
        data:
          type: object
          description: Response payload
      required:
        - success
    
    ErrorResponse:
      type: object
      description: Standard error response wrapper
      properties:
        success:
          type: boolean
          example: false
          description: Always false for errors
        message:
          type: string
          example: "An error occurred"
          description: Human-readable error message
        error:
          type: string
          example: "Detailed error information"
          description: Technical error details
        errors:
          type: array
          description: Validation errors (if applicable)
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "Email is required"
        statusCode:
          type: integer
          example: 400
          description: HTTP status code
        timestamp:
          type: string
          format: date-time
          example: "2025-10-20T10:30:00Z"
          description: Error timestamp
      required:
        - success
        - message
    
    PaginatedResponse:
      type: object
      description: Paginated list response
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            type: object
        pagination:
          type: object
          properties:
            page:
              type: integer
              example: 1
              description: Current page number
            limit:
              type: integer
              example: 10
              description: Items per page
            total:
              type: integer
              example: 100
              description: Total number of items
            totalPages:
              type: integer
              example: 10
              description: Total number of pages
            hasNextPage:
              type: boolean
              example: true
            hasPrevPage:
              type: boolean
              example: false
      required:
        - success
        - data
        - pagination
    
    ValidationError:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            errors:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  message:
                    type: string
                  value:
                    type: string
    
    # Legacy Error Schema (deprecated - use ErrorResponse)
    Error:
      deprecated: true
      type: object
      properties:
        success:
          type: boolean
          default: false
        message:
          type: string
          description: Error message
        error:
          type: string
          description: Detailed error information
  
  # ==================== Common Response Objects ====================
  
  responses:
    UnauthorizedError:
      description: Authentication required or token invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "Authentication required"
            error: "No token provided or token is invalid"
            statusCode: 401
    
    ForbiddenError:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "Access denied"
            error: "You don't have permission to access this resource"
            statusCode: 403
    
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "Resource not found"
            error: "The requested resource does not exist"
            statusCode: 404
    
    ValidationError:
      description: Request validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            success: false
            message: "Validation failed"
            statusCode: 400
            errors:
              - field: "email"
                message: "Email is required"
              - field: "password"
                message: "Password must be at least 6 characters"
    
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "Internal server error"
            error: "An unexpected error occurred"
            statusCode: 500
    
    RateLimitError:
      description: Too many requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "Rate limit exceeded"
            error: "Too many requests from this IP, please try again later"
            statusCode: 429
  
  # ==================== Common Parameters ====================
  
  parameters:
    IdPathParam:
      name: id
      in: path
      required: true
      description: Resource unique identifier
      schema:
        type: string
        pattern: '^[a-f\d]{24}$'
        example: "507f1f77bcf86cd799439011"
    
    PageQueryParam:
      name: page
      in: query
      description: Page number for pagination
      schema:
        type: integer
        minimum: 1
        default: 1
        example: 1
    
    LimitQueryParam:
      name: limit
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
        example: 10
    
    SortQueryParam:
      name: sort
      in: query
      description: Sort field and order (prefix with - for descending)
      schema:
        type: string
        example: "-createdAt"
    
    SearchQueryParam:
      name: search
      in: query
      description: Search query string
      schema:
        type: string
        example: "portfolio"

paths:
  /health:
    get:
      summary: API Health Check
      description: |
        Returns the health status of the API server.
        
        Use this endpoint to verify the server is running and responding to requests.
        Does not require authentication.
      operationId: healthCheck
      tags:
        - Health
      responses:
        '200':
          description: Server is healthy and running
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "AUREA Backend is running"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-10-20T10:30:00Z"
                  environment:
                    type: string
                    enum: [development, staging, production]
                    example: "development"
                  version:
                    type: string
                    example: "1.0.0"
                  uptime:
                    type: number
                    description: Server uptime in seconds
                    example: 3600.5
                required:
                  - success
                  - message
                  - timestamp
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "Service unavailable"
                error: "Database connection failed"
                statusCode: 503

  /api/auth/signup:
    post:
      summary: Register New User
      description: |
        Create a new user account with email and password.
        
        **Validation Rules:**
        - Name: Required, minimum 2 characters
        - Email: Required, must be valid email format, unique
        - Password: Required, minimum 6 characters
        
        Returns JWT token for immediate authentication after registration.
      operationId: registerUser
      tags:
        - Authentication
      requestBody:
        required: true
        description: User registration details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 100
                  example: "John Doe"
                  description: User's full name
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                  description: User's email address (must be unique)
                password:
                  type: string
                  minLength: 6
                  maxLength: 128
                  format: password
                  example: "SecureP@ss123"
                  description: User's password (min 6 characters)
              required:
                - name
                - email
                - password
            examples:
              validRegistration:
                summary: Valid registration
                value:
                  name: "Jane Smith"
                  email: "jane.smith@example.com"
                  password: "MySecure123!"
      responses:
        '201':
          description: User registered successfully
          headers:
            X-RateLimit-Limit:
              description: Request limit per hour
              schema:
                type: integer
            X-RateLimit-Remaining:
              description: Remaining requests
              schema:
                type: integer
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                          token:
                            type: string
                            description: JWT authentication token
                            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              examples:
                successfulRegistration:
                  summary: Successful registration
                  value:
                    success: true
                    message: "User registered successfully"
                    data:
                      user:
                        _id: "507f1f77bcf86cd799439011"
                        name: "Jane Smith"
                        email: "jane.smith@example.com"
                        isPremium: false
                        createdAt: "2025-10-20T10:30:00Z"
                      token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "Email already exists"
                error: "A user with this email address is already registered"
                statusCode: 409
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/login:
    post:
      summary: User Login
      description: |
        Authenticate user with email and password.
        
        Returns JWT token valid for 30 days (configurable).
        Token should be included in subsequent requests as Bearer token in Authorization header.
      operationId: loginUser
      tags:
        - Authentication
      requestBody:
        required: true
        description: Login credentials
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                  description: User's registered email
                password:
                  type: string
                  format: password
                  example: "MySecure123!"
                  description: User's password
              required:
                - email
                - password
            examples:
              validLogin:
                summary: Valid login credentials
                value:
                  email: "jane.smith@example.com"
                  password: "MySecure123!"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/me:
    get:
      summary: Get current user profile
      description: Retrieve the authenticated user's profile
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update user profile
      description: Update the authenticated user's profile
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Updated Name"
                email:
                  type: string
                  format: email
                  example: "updated@example.com"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/profile:
    get:
      summary: Get current user profile
      description: Get the authenticated user's profile with statistics
      tags:
        - User Management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update user profile
      description: Update name, email, or password for the authenticated user
      tags:
        - User Management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New name (optional)
                  example: "John Updated"
                email:
                  type: string
                  format: email
                  description: New email (optional)
                  example: "john.updated@example.com"
                currentPassword:
                  type: string
                  description: Current password (required for password change)
                  example: "oldpassword123"
                newPassword:
                  type: string
                  minLength: 6
                  description: New password (optional, requires currentPassword)
                  example: "newpassword123"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Profile updated successfully"
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized or incorrect password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete user account
      description: Permanently delete the authenticated user's account and all associated data
      tags:
        - User Management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: User's password for confirmation
                  example: "password123"
              required:
                - password
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Account deleted successfully"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized or incorrect password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users:
    get:
      summary: Get all users (Admin)
      description: Get a paginated list of all users with search functionality (Admin only)
      tags:
        - User Management
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            maximum: 100
          description: Number of users per page
        - in: query
          name: search
          schema:
            type: string
          description: Search by name or email
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      pagination:
                        type: object
                        properties:
                          currentPage:
                            type: integer
                          totalPages:
                            type: integer
                          totalUsers:
                            type: integer
                          hasNextPage:
                            type: boolean
                          hasPrevPage:
                            type: boolean
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{id}:
    get:
      summary: Get user by ID (Admin)
      description: Get detailed information about a specific user (Admin only)
      tags:
        - User Management
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/UserProfile'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update user by ID (Admin)
      description: Update any user's information (Admin only)
      tags:
        - User Management
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User updated successfully"
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete user by ID (Admin)
      description: Delete any user account and all associated data (Admin only)
      tags:
        - User Management
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User deleted successfully"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/premium/status:
    get:
      summary: Check current user premium status
      description: Get premium subscription status for the authenticated user
      tags:
        - User Management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Premium status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      isPremium:
                        type: boolean
                        example: true
                        description: Whether user has active premium subscription
                      premiumType:
                        type: string
                        enum: [none, monthly, yearly, lifetime]
                        example: "monthly"
                        description: Type of premium subscription
                      premiumStartDate:
                        type: string
                        format: date-time
                        nullable: true
                        description: When premium subscription started
                      premiumEndDate:
                        type: string
                        format: date-time
                        nullable: true
                        description: When premium subscription ends (null for lifetime)
                      daysRemaining:
                        type: number
                        example: 25
                        description: Days remaining in subscription (0 for lifetime)
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{id}/premium:
    get:
      summary: Get user premium status (Admin)
      description: Get premium subscription status for any user (Admin only)
      tags:
        - User Management
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: Premium status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        example: "60d5f484f1d2c8b1f8e4e1a1"
                      name:
                        type: string
                        example: "John Doe"
                      email:
                        type: string
                        example: "john@example.com"
                      isPremium:
                        type: boolean
                        example: true
                      premiumType:
                        type: string
                        enum: [none, monthly, yearly, lifetime]
                        example: "monthly"
                      premiumStartDate:
                        type: string
                        format: date-time
                        nullable: true
                      premiumEndDate:
                        type: string
                        format: date-time
                        nullable: true
                      daysRemaining:
                        type: number
                        example: 25
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Set premium status for a user (Admin/Testing)
      description: |
        Set or update premium subscription status for any user. 
        This is used for testing purposes or admin management before payment integration.
      tags:
        - User Management
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - premiumType
              properties:
                premiumType:
                  type: string
                  enum: [monthly, yearly, lifetime]
                  example: "monthly"
                  description: Type of premium subscription to set
                duration:
                  type: number
                  example: 30
                  description: |
                    Duration in days (optional). 
                    Defaults: 30 for monthly, 365 for yearly. 
                    Ignored for lifetime.
      responses:
        '200':
          description: Premium status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Premium status updated successfully"
                  data:
                    type: object
                    properties:
                      isPremium:
                        type: boolean
                        example: true
                      premiumType:
                        type: string
                        example: "monthly"
                      premiumStartDate:
                        type: string
                        format: date-time
                      premiumEndDate:
                        type: string
                        format: date-time
                        nullable: true
                      daysRemaining:
                        type: number
                        example: 30
        '400':
          description: Invalid premium type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Remove premium status from a user (Admin)
      description: Remove premium subscription status from any user (Admin only)
      tags:
        - User Management
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: Premium status removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Premium status removed successfully"
                  data:
                    type: object
                    properties:
                      isPremium:
                        type: boolean
                        example: false
                      premiumType:
                        type: string
                        example: "none"
                      premiumStartDate:
                        type: string
                        nullable: true
                        example: null
                      premiumEndDate:
                        type: string
                        nullable: true
                        example: null
                      daysRemaining:
                        type: number
                        example: 0
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/portfolios:
    post:
      summary: Create a new portfolio
      description: Create a new portfolio with template support
      tags:
        - Portfolios
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  maxLength: 200
                  example: "My Creative Portfolio"
                description:
                  type: string
                  maxLength: 1000
                  example: "A showcase of my best work"
                templateId:
                  type: string
                  enum: [echelon]
                  example: "echelon"
                content:
                  type: object
                  description: Portfolio content structure
                styling:
                  type: object
                  description: Custom styling configuration
              required:
                - title
                - templateId
      responses:
        '201':
          description: Portfolio created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      portfolio:
                        $ref: '#/components/schemas/Portfolio'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/portfolios/user/me:
    get:
      summary: Get current user's portfolios
      description: Retrieve all portfolios belonging to the authenticated user with filtering and sorting options
      tags:
        - Portfolios
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: published
          schema:
            type: string
            enum: [all, true, false]
          description: Filter by publication status
        - in: query
          name: sort
          schema:
            type: string
            enum: [createdAt, updatedAt, title]
            default: createdAt
          description: Sort field
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
      responses:
        '200':
          description: Portfolios retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      portfolios:
                        type: array
                        items:
                          $ref: '#/components/schemas/Portfolio'
                      statistics:
                        type: object
                        properties:
                          total:
                            type: number
                          published:
                            type: number
                          unpublished:
                            type: number
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/portfolios/user/{userId}:
    get:
      summary: Get user's portfolios
      description: Retrieve portfolios for a specific user with filtering options
      tags:
        - Portfolios
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: User ID
        - in: query
          name: published
          schema:
            type: string
            enum: [all, true, false]
          description: Filter by publication status
        - in: query
          name: sort
          schema:
            type: string
            enum: [createdAt, updatedAt, title]
            default: createdAt
          description: Sort field
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
      responses:
        '200':
          description: Portfolios retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      portfolios:
                        type: array
                        items:
                          $ref: '#/components/schemas/Portfolio'
                      statistics:
                        type: object
                        properties:
                          total:
                            type: number
                          published:
                            type: number
                          unpublished:
                            type: number
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/portfolios/slug/{slug}/check:
    get:
      summary: Check slug availability
      description: Verify if a slug is available for use
      tags:
        - Portfolios
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
          description: Slug to check
        - in: query
          name: excludeId
          schema:
            type: string
          description: Portfolio ID to exclude from check
      responses:
        '200':
          description: Slug is available
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      available:
                        type: boolean
                      slug:
                        type: string
        '409':
          description: Slug is already taken
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      available:
                        type: boolean
                      suggestions:
                        type: array
                        items:
                          type: string
  
  /api/public/portfolio/{slug}:
    get:
      summary: Get public portfolio by slug
      description: Retrieve a published portfolio without authentication
      tags:
        - Portfolios
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
          description: Portfolio slug
      responses:
        '200':
          description: Portfolio retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Portfolio'
        '404':
          description: Portfolio not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/portfolios/{id}:
    get:
      summary: Get portfolio by ID
      description: Retrieve a specific portfolio with view tracking
      tags:
        - Portfolios
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Portfolio ID
      responses:
        '200':
          description: Portfolio retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      portfolio:
                        $ref: '#/components/schemas/Portfolio'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Portfolio not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update portfolio
      description: Update portfolio content (owner only)
      tags:
        - Portfolios
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Portfolio ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  maxLength: 200
                description:
                  type: string
                  maxLength: 1000
                content:
                  type: object
                styling:
                  type: object
                published:
                  type: boolean
                isPublic:
                  type: boolean
      responses:
        '200':
          description: Portfolio updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      portfolio:
                        $ref: '#/components/schemas/Portfolio'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Not the owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Portfolio not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete portfolio
      description: Delete a portfolio (owner only)
      tags:
        - Portfolios
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Portfolio ID
      responses:
        '200':
          description: Portfolio deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Not the owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Portfolio not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/portfolios/{id}/publish:
    put:
      summary: Publish portfolio
      description: Publish a portfolio with slug validation
      tags:
        - Portfolios
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Portfolio ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                slug:
                  type: string
                  pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
                  example: "my-creative-portfolio"
              required:
                - slug
      responses:
        '200':
          description: Portfolio published successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      portfolio:
                        type: object
                        properties:
                          _id:
                            type: string
                          isPublished:
                            type: boolean
                          slug:
                            type: string
                          publishedAt:
                            type: string
                            format: date-time
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Slug already taken
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      suggestions:
                        type: array
                        items:
                          type: string
  
  /api/portfolios/{id}/unpublish:
    put:
      summary: Unpublish portfolio
      description: Unpublish a portfolio (keeps slug for republishing)
      tags:
        - Portfolios
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Portfolio ID
      responses:
        '200':
          description: Portfolio unpublished successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      portfolio:
                        type: object
                        properties:
                          _id:
                            type: string
                          isPublished:
                            type: boolean
                          unpublishedAt:
                            type: string
                            format: date-time

  /api/portfolios/slug/{slug}:
    get:
      summary: Get portfolio by slug (DEPRECATED)
      description: Use /api/public/portfolio/{slug} instead
      deprecated: true
      tags:
        - Portfolios
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          description: Portfolio slug
          example: "john-doe-portfolio"
      responses:
        '200':
          description: Portfolio retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      portfolio:
                        $ref: '#/components/schemas/Portfolio'
        '404':
          description: Portfolio not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/case-studies:
    post:
      summary: Create a new case study
      description: |
        Create a case study linked to a portfolio project.
        
        **Smart HTML Transformation:**
        When published, case studies are automatically transformed to responsive HTML:
        - Real database content is used when available
        - Professional defaults are used for empty/template values
        - Fully responsive mobile-optimized layouts
        - Projects are automatically marked with hasCaseStudy: true
        
        **Content Structure:**
        - hero: Project title, subtitle, cover image, client info
        - overview: Description, challenge, solution, results
        - sections: Array of content blocks with headings, text, images
        - additionalContext: Conclusion or additional information
        - nextProject: Link to next case study (optional)
        
        **Best Practices:**
        - Provide complete hero.title to avoid "Untitled Project" fallback
        - Add overview.description for meaningful introductions
        - Include sections with real content to showcase work properly
        - Empty fields will use professional placeholder text
      tags:
        - Case Studies
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                portfolioId:
                  type: string
                  description: Portfolio ID this case study belongs to
                projectId:
                  type: string
                  description: Project ID from portfolio content
                content:
                  type: object
                  description: Case study content structure
                  properties:
                    hero:
                      type: object
                    overview:
                      type: object
                    sections:
                      type: array
                      items:
                        type: object
              required:
                - portfolioId
                - projectId
      responses:
        '201':
          description: Case study created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      caseStudy:
                        $ref: '#/components/schemas/CaseStudy'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/case-studies/{id}:
    get:
      summary: Get case study by ID
      description: Retrieve a specific case study
      tags:
        - Case Studies
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Case study ID
      responses:
        '200':
          description: Case study retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      caseStudy:
                        $ref: '#/components/schemas/CaseStudy'
        '404':
          description: Case study not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update case study
      description: Update case study content (owner only)
      tags:
        - Case Studies
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Case study ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: object
                  description: Updated case study content
      responses:
        '200':
          description: Case study updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      caseStudy:
                        $ref: '#/components/schemas/CaseStudy'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete case study
      description: Delete a case study (owner only)
      tags:
        - Case Studies
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Case study ID
      responses:
        '200':
          description: Case study deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/case-studies/portfolio/{portfolioId}/project/{projectId}:
    get:
      summary: Get case study by portfolio and project ID
      description: Retrieve a case study for a specific portfolio project
      tags:
        - Case Studies
      security:
        - bearerAuth: []
      parameters:
        - name: portfolioId
          in: path
          required: true
          schema:
            type: string
          description: Portfolio ID
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID within the portfolio
      responses:
        '200':
          description: Case study retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/CaseStudy'
        '404':
          description: Case study not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/case-studies/public/{portfolioSlug}/{projectId}:
    get:
      summary: Get public case study
      description: Retrieve a case study by portfolio slug and project ID (public access)
      tags:
        - Case Studies
      parameters:
        - name: portfolioSlug
          in: path
          required: true
          schema:
            type: string
          description: Portfolio slug/subdomain
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: Project ID
      responses:
        '200':
          description: Case study retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/CaseStudy'
        '404':
          description: Case study not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/upload/image:
    post:
      summary: Upload image to Cloudinary
      description: Upload a single image with automatic optimization
      tags:
        - Image Upload
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file (JPG, JPEG, PNG, WebP)
              required:
                - image
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      imageUrl:
                        type: string
                        description: Cloudinary URL
                      publicId:
                        type: string
                        description: Cloudinary public ID
        '400':
          description: Invalid file or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete image from Cloudinary
      description: Remove an image using its URL or public ID
      tags:
        - Image Upload
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                imageUrl:
                  type: string
                  description: Full Cloudinary image URL
              required:
                - imageUrl
      responses:
        '200':
          description: Image deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/upload/single:
    post:
      summary: Upload a single image to Cloudinary
      description: Upload a single image file with automatic optimization and folder organization
      tags:
        - Image Upload
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file (jpeg, png, gif, webp, max 25MB)
                portfolioId:
                  type: string
                  description: Optional portfolio ID to organize uploads
                  example: "60d21b4967d0d8992e610c85"
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Image uploaded successfully"
                  data:
                    type: object
                    properties:
                      url:
                        type: string
                        example: "https://res.cloudinary.com/demo/image/upload/v1234567890/aurea/user123/portfolio456/1234567890-image.jpg"
                      publicId:
                        type: string
                        example: "aurea/user123/portfolio456/1234567890-image"
                      width:
                        type: number
                        example: 1920
                      height:
                        type: number
                        example: 1080
                      format:
                        type: string
                        example: "jpg"
                      size:
                        type: number
                        example: 2048000
        '400':
          description: Bad request - No image file provided or invalid file type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '413':
          description: Payload too large - File exceeds 25MB limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests - Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/upload/multiple:
    post:
      summary: Upload multiple images to Cloudinary
      description: Upload multiple image files at once (max 6 files, 25MB each)
      tags:
        - Image Upload
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - images
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Array of image files (max 6 files, 25MB each, jpeg/png/gif/webp)
                portfolioId:
                  type: string
                  description: Optional portfolio ID to organize uploads
                  example: "60d21b4967d0d8992e610c85"
      responses:
        '200':
          description: All images uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "3 of 3 images uploaded successfully"
                  data:
                    type: object
                    properties:
                      images:
                        type: array
                        items:
                          type: object
                          properties:
                            url:
                              type: string
                            publicId:
                              type: string
                            width:
                              type: number
                            height:
                              type: number
                            format:
                              type: string
                            size:
                              type: number
                      failed:
                        type: array
                        items:
                          type: object
                          properties:
                            filename:
                              type: string
                            error:
                              type: string
        '207':
          description: Partial success - Some images uploaded, some failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      images:
                        type: array
                        description: Successfully uploaded images
                      failed:
                        type: array
                        description: Failed uploads with error details
        '400':
          description: Bad request - No files provided or too many files
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '413':
          description: Payload too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/sites/publish:
    post:
      summary: Publish portfolio to Vercel
      description: |
        Generate HTML from portfolio data and deploy to Vercel with one click.
        
        **Complete Publishing Flow:**
        1. Extract portfolio data (about, projects, gallery, contact)
        2. Fetch case studies linked to portfolio projects
        3. Generate professional HTML files with smart data transformation
        4. Create deployment files (index.html, responsive case-study pages)
        5. Upload to Vercel hosting
        6. Return live deployment URL
        
        **Smart Case Study Transformation:**
        - Automatically detects real vs template/default data
        - Uses database content when available (hero, overview, sections)
        - Falls back to professional defaults when content is empty
        - Generates fully responsive mobile-optimized HTML
        - Marks projects with hasCaseStudy flags for portfolio integration
        
        **File Naming:** Files are organized by subdomain from portfolio
        
        **What Gets Generated:**
        - index.html (main portfolio page with VIEW CASE STUDY buttons)
        - case-study-{projectId}.html (individual project pages)
        - Fully responsive design for all devices (mobile, tablet, desktop)
        - SEO optimized with meta tags and proper structure
        - Professional fallbacks when case study content is incomplete
      tags:
        - Site Publishing
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                portfolioId:
                  type: string
                  description: Portfolio ID to publish
                  example: "507f1f77bcf86cd799439011"
              required:
                - portfolioId
      responses:
        '200':
          description: Portfolio published successfully to Vercel
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Site published successfully"
                  data:
                    type: object
                    properties:
                      site:
                        $ref: '#/components/schemas/Site'
                      portfolio:
                        type: object
                        properties:
                          id:
                            type: string
                          title:
                            type: string
                          published:
                            type: boolean
                      deployment:
                        type: object
                        properties:
                          timestamp:
                            type: string
                            format: date-time
                          status:
                            type: string
                            example: "success"
                          files:
                            type: object
                            properties:
                              generated:
                                type: integer
                                description: Total number of files generated (index.html + case studies)
                                example: 4
                              totalSize:
                                type: integer
                                description: Total size of all generated files in bytes
                                example: 152847
                      vercel:
                        type: object
                        properties:
                          url:
                            type: string
                            description: Live Vercel deployment URL
                            example: "https://designer-name-xyz123.vercel.app"
                          status:
                            type: string
                            description: Deployment status (BUILDING, READY, ERROR)
                            example: "BUILDING"
                      files:
                        type: object
                        properties:
                          generated:
                            type: integer
                            description: Number of HTML files generated
                            example: 4
                          totalSize:
                            type: integer
                            description: Total file size in bytes
                            example: 152847
        '400':
          description: Portfolio not found or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not the portfolio owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/sites/sub-publish:
    post:
      summary: Publish portfolio to local subdomain (aurea.tool/$user)
      description: |
        Generate HTML from portfolio data and save to local subdomain structure without deploying to Vercel.
        
        **Publishing Flow:**
        1. Extract portfolio data (about, projects, gallery, contact)
        2. Fetch case studies linked to portfolio projects
        3. Generate professional HTML files with smart data transformation
        4. Create deployment files (index.html, responsive case-study pages)
        5. Save files to local generated-files directory
        6. Create/update Site record with subdomain reference
        7. Return local access URL (aurea.tool/{subdomain})
        
        **Subdomain Structure:**
        - URL Pattern: `aurea.tool/{user-subdomain}`
        - **Custom Subdomain:** You can provide your own subdomain (Gmail-style)
          * Format: 3-30 lowercase letters, numbers, and hyphens only
          * Must start and end with alphanumeric character
          * Examples: `john-designer`, `my-portfolio`, `awesome-work`
        - **Auto-Generated:** If not provided, generates from designer name + timestamp
          * Example: `jane-designer-1760525444554`
        - Files saved to: `generated-files/{subdomain}/`
        - Each user can have their own unique subdomain
        - **Updating Subdomain:** You can update your subdomain anytime
          * Must be available (not taken by another user)
          * Old folder is automatically deleted
          * New folder is created with updated subdomain
          * Portfolio's publishedUrl is updated
        
        **Smart Case Study Transformation:**
        - Automatically detects real vs template/default data
        - Uses database content when available (hero, overview, sections)
        - Falls back to professional defaults when content is empty
        - Generates fully responsive mobile-optimized HTML
        - Marks projects with hasCaseStudy flags for portfolio integration
        
        **What Gets Generated:**
        - index.html (main portfolio page with VIEW CASE STUDY buttons)
        - case-study-{projectId}.html (individual project pages)
        - Fully responsive design for all devices (mobile, tablet, desktop)
        - SEO optimized with meta tags and proper structure
        - Professional fallbacks when case study content is incomplete
      tags:
        - Site Publishing
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                portfolioId:
                  type: string
                  description: Portfolio ID to publish
                  example: "507f1f77bcf86cd799439011"
                customSubdomain:
                  type: string
                  description: |
                    **Optional:** Custom subdomain for your portfolio (Gmail-style).
                    - If provided, must be unique (not taken by another user)
                    - Format: 3-30 lowercase letters, numbers, and hyphens
                    - Must start and end with alphanumeric character (not hyphen)
                    - You can update your own portfolio's subdomain anytime
                    - If not provided, auto-generates from designer name + timestamp
                    - **Validation:** Checks ownership - you cannot take another user's subdomain
                  example: "my-awesome-portfolio"
                  pattern: "^[a-z0-9](?:[a-z0-9-]{1,28}[a-z0-9])?$"
                  minLength: 3
                  maxLength: 30
              required:
                - portfolioId
      responses:
        '200':
          description: Portfolio published successfully to local subdomain
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Portfolio published successfully to local subdomain"
                  data:
                    type: object
                    properties:
                      site:
                        type: object
                        properties:
                          id:
                            type: string
                            example: "507f1f77bcf86cd799439011"
                          subdomain:
                            type: string
                            description: The subdomain assigned to this portfolio (auto-generated or custom)
                            example: "my-awesome-portfolio"
                          url:
                            type: string
                            description: Public URL pattern for accessing the portfolio
                            example: "aurea.tool/my-awesome-portfolio"
                          localUrl:
                            type: string
                            description: Local server access URL for development/testing
                            example: "http://localhost:5000/api/sites/my-awesome-portfolio"
                          published:
                            type: boolean
                            example: true
                          deploymentStatus:
                            type: string
                            example: "success"
                          lastDeployedAt:
                            type: string
                            format: date-time
                      portfolio:
                        type: object
                        properties:
                          id:
                            type: string
                          title:
                            type: string
                          slug:
                            type: string
                            description: Saved slug referencing the user's subdomain (same as subdomain)
                            example: "my-awesome-portfolio"
                          publishedUrl:
                            type: string
                            description: Full published URL (same as url field in site object)
                            example: "aurea.tool/my-awesome-portfolio"
                      deployment:
                        type: object
                        properties:
                          filesGenerated:
                            type: array
                            items:
                              type: string
                            description: List of generated HTML files
                            example: ["index.html", "case-study-1.html", "case-study-2.html"]
                          localPath:
                            type: string
                            description: Local file system path where files are saved
                            example: "/path/to/generated-files/my-awesome-portfolio"
                          validation:
                            type: object
                            properties:
                              score:
                                type: number
                                example: 95
                              isValid:
                                type: boolean
                                example: true
                      summary:
                        type: object
                        description: Deployment summary with statistics and metadata
                      notes:
                        type: object
                        description: Additional information about the deployment
                        properties:
                          folderCleanup:
                            type: string
                            description: Information about old folder cleanup if subdomain was updated
                            example: "Old folder 'old-subdomain' was deleted, new folder 'my-awesome-portfolio' created"
        '400':
          description: Portfolio not found or invalid subdomain format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not the portfolio owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: |
            Conflict - Custom subdomain is already taken by another user or portfolio.
            
            **Conflict Scenarios:**
            1. Subdomain is taken by a different user
            2. Subdomain is taken by your own different portfolio
            
            **Note:** You CAN update your own portfolio's subdomain (no conflict).
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Subdomain is already taken by another user"
                  subdomain:
                    type: string
                    description: The subdomain that was attempted
                    example: "my-awesome-portfolio"
                  available:
                    type: boolean
                    description: Always false in conflict responses
                    example: false
              examples:
                takenByAnotherUser:
                  summary: Subdomain taken by another user
                  value:
                    success: false
                    message: "Subdomain is already taken by another user"
                    subdomain: "john-designer"
                    available: false
                takenByOwnPortfolio:
                  summary: Subdomain taken by your different portfolio
                  value:
                    success: false
                    message: "Subdomain is already taken by another portfolio you own"
                    subdomain: "my-awesome-portfolio"
                    available: false

  /api/sites/{subdomain}:
    get:
      summary: Get published site details
      description: Retrieve information about a published site by subdomain
      tags:
        - Site Publishing
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: subdomain
          required: true
          schema:
            type: string
          description: Site subdomain (designer name)
          example: "john-designer"
      responses:
        '200':
          description: Site details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Site'
        '404':
          description: Site not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/sites/debug/generate:
    post:
      summary: Test HTML generation without deployment
      description: |
        Generate HTML files from portfolio data without deploying to Vercel.
        Useful for testing and debugging the HTML generation process.
      tags:
        - Site Publishing
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                portfolioId:
                  type: string
                  description: Portfolio ID to generate HTML for
                  example: "507f1f77bcf86cd799439011"
              required:
                - portfolioId
      responses:
        '200':
          description: HTML generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      filesGenerated:
                        type: array
                        items:
                          type: string
                      outputPath:
                        type: string
                        description: Local path where files were saved
                      totalSize:
                        type: string
                        description: Total size of generated files
        '400':
          description: Portfolio not found or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/pdf/portfolio/{portfolioId}:
    get:
      summary: Export portfolio as PDF
      description: |
        Export a portfolio as PDF document with inline viewing.

        **Features:**
        - Preserves exact styling from templateConvert.js
        - Supports custom page formats and orientations
        - Optional authentication for public portfolios
        - Can export main portfolio or specific case studies

        **Access Control:**
        - Owner: Full access with optional save to filesystem
        - Public: Access only if portfolio is published
      tags:
        - PDF Export
      security:
        - bearerAuth: []
        - {}
      parameters:
        - in: path
          name: portfolioId
          required: true
          schema:
            type: string
          description: Portfolio ID to export
          example: "507f1f77bcf86cd799439011"
        - in: query
          name: pageType
          schema:
            type: string
            default: portfolio
          description: |
            Type of content to export:
            - 'portfolio': Main portfolio page only (default)
            - 'all': All pages including case studies
            - 'case-study-{id}': Specific case study by project ID
          example: "portfolio"
        - in: query
          name: save
          schema:
            type: string
            enum: [true, false]
            default: false
          description: Save to filesystem (owner only, for debugging)
        - in: query
          name: format
          schema:
            type: string
            enum: [A4, A3, Letter, Legal]
            default: A4
          description: PDF page format
        - in: query
          name: landscape
          schema:
            type: string
            enum: [true, false]
            default: false
          description: Use landscape orientation
      responses:
        '200':
          description: PDF generated successfully
          content:
            application/pdf:
              schema:
                type: string
                format: binary
          headers:
            Content-Type:
              schema:
                type: string
                example: application/pdf
            Content-Disposition:
              schema:
                type: string
                example: inline; filename="portfolio-export.pdf"
            Content-Length:
              schema:
                type: integer
                example: 524288
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access denied - Portfolio not published
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Portfolio not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: PDF generation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/pdf/portfolio/{portfolioId}/complete:
    get:
      summary: Export complete portfolio with case studies
      description: |
        Export portfolio and all associated case studies as a single combined PDF.

        **Features:**
        - Combines main portfolio and all case studies
        - Maintains proper page ordering and navigation
        - Preserves all styling and formatting
        - Ideal for complete portfolio documentation
      tags:
        - PDF Export
      security:
        - bearerAuth: []
        - {}
      parameters:
        - in: path
          name: portfolioId
          required: true
          schema:
            type: string
          description: Portfolio ID to export
          example: "507f1f77bcf86cd799439011"
        - in: query
          name: save
          schema:
            type: string
            enum: [true, false]
            default: false
          description: Save to filesystem (owner only)
        - in: query
          name: format
          schema:
            type: string
            enum: [A4, A3, Letter, Legal]
            default: A4
          description: PDF page format
        - in: query
          name: landscape
          schema:
            type: string
            enum: [true, false]
            default: false
          description: Use landscape orientation
      responses:
        '200':
          description: Complete PDF generated successfully
          content:
            application/pdf:
              schema:
                type: string
                format: binary
          headers:
            Content-Type:
              schema:
                type: string
                example: application/pdf
            Content-Disposition:
              schema:
                type: string
                example: inline; filename="portfolio-complete.pdf"
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Portfolio not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: PDF generation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/pdf/portfolio/{portfolioId}/download:
    get:
      summary: Download portfolio PDF
      description: |
        Download portfolio as PDF file (forces download dialog).

        **Features:**
        - Forces browser download instead of inline viewing
        - Same export options as inline endpoint
        - Useful for saving PDFs directly to user's device
      tags:
        - PDF Export
      security:
        - bearerAuth: []
        - {}
      parameters:
        - in: path
          name: portfolioId
          required: true
          schema:
            type: string
          description: Portfolio ID to download
          example: "507f1f77bcf86cd799439011"
        - in: query
          name: pageType
          schema:
            type: string
            default: portfolio
          description: Type of content to export
        - in: query
          name: format
          schema:
            type: string
            enum: [A4, A3, Letter, Legal]
            default: A4
          description: PDF page format
        - in: query
          name: landscape
          schema:
            type: string
            enum: [true, false]
            default: false
          description: Use landscape orientation
      responses:
        '200':
          description: PDF ready for download
          content:
            application/pdf:
              schema:
                type: string
                format: binary
          headers:
            Content-Type:
              schema:
                type: string
                example: application/pdf
            Content-Disposition:
              schema:
                type: string
                example: attachment; filename="portfolio-export.pdf"
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Portfolio not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/pdf/portfolio/{portfolioId}/info:
    get:
      summary: Get PDF export information
      description: |
        Get information about available PDF export options for a portfolio.

        **Information Provided:**
        - Portfolio details (title, project count, case study count)
        - Estimated file sizes for different export types
        - Available export formats and options
        - List of exportable page types
      tags:
        - PDF Export
      security:
        - bearerAuth: []
        - {}
      parameters:
        - in: path
          name: portfolioId
          required: true
          schema:
            type: string
          description: Portfolio ID
          example: "507f1f77bcf86cd799439011"
      responses:
        '200':
          description: PDF export information retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "PDF export information retrieved"
                  data:
                    type: object
                    properties:
                      portfolio:
                        type: object
                        properties:
                          id:
                            type: string
                          title:
                            type: string
                          isPublished:
                            type: boolean
                          projectCount:
                            type: integer
                            example: 5
                          caseStudyCount:
                            type: integer
                            example: 3
                      exportInfo:
                        type: object
                        properties:
                          estimatedSize:
                            type: object
                            properties:
                              mainPortfolio:
                                type: string
                                example: "~732KB"
                              caseStudies:
                                type: string
                                example: "~586KB"
                              total:
                                type: string
                                example: "~1318KB"
                          availableExports:
                            type: array
                            items:
                              type: object
                              properties:
                                type:
                                  type: string
                                description:
                                  type: string
                                endpoint:
                                  type: string
                          options:
                            type: object
                            properties:
                              formats:
                                type: array
                                items:
                                  type: string
                                example: ["A4", "A3", "Letter", "Legal"]
                              orientations:
                                type: array
                                items:
                                  type: string
                                example: ["portrait", "landscape"]
                              pageTypes:
                                type: array
                                items:
                                  type: string
                                example: ["portfolio", "all", "case-study-1"]
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Portfolio not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/pdf/cleanup:
    post:
      summary: Clean up old PDF files
      description: |
        Maintenance endpoint to clean up old generated PDF files from the filesystem.

        **Admin Only:** Requires admin role for access.

        **Features:**
        - Removes PDF files older than specified days
        - Default retention: 7 days
        - Helps manage disk space usage
      tags:
        - PDF Export
      security:
        - bearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                maxAgeInDays:
                  type: integer
                  default: 7
                  description: Maximum age of files to keep (in days)
                  example: 7
      responses:
        '200':
          description: Cleanup completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "PDF cleanup completed. Removed files older than 7 days."
        '403':
          description: Access denied - Admin only
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Cleanup failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/proposals/extract:
    post:
      tags:
        - Proposal Extraction
      summary: Upload and extract data from PDF proposal (Two-Step AI Processing)
      description: |
        Upload a PDF file and extract structured data using Google's GenAI library with two-step processing:
        
        **Step 1**: Complete document analysis - extracts ALL information from the document
        **Step 2**: Pricing-focused filtering - filters only pricing calculator relevant data
        
        Uses Gemini 2.5 Pro with fallback to other models (2.5 Flash, 1.5 Pro, 1.5 Flash, Pro).
        Authentication is optional - user ID will be set to 'anonymous' if not authenticated.
        
        Perfect for pricing calculator tools requiring comprehensive document analysis.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                pdf:
                  type: string
                  format: binary
                  description: PDF file to extract data from (max 10MB)
              required:
                - pdf
      responses:
        '200':
          description: PDF processed successfully with two-step analysis
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "PDF processed successfully with two-step method"
                  data:
                    type: object
                    properties:
                      step1_complete_analysis:
                        type: object
                        description: Complete document analysis with all extracted information
                        properties:
                          clientInfo:
                            type: object
                            properties:
                              name:
                                type: string
                              contact:
                                type: object
                              address:
                                type: string
                          projectDetails:
                            type: object
                            properties:
                              title:
                                type: string
                              description:
                                type: string
                              scope:
                                type: array
                                items:
                                  type: string
                          requirements:
                            type: array
                            items:
                              type: string
                          timeline:
                            type: object
                            properties:
                              startDate:
                                type: string
                              endDate:
                                type: string
                              milestones:
                                type: array
                                items:
                                  type: object
                          budget:
                            type: object
                            properties:
                              total:
                                type: number
                              currency:
                                type: string
                              breakdown:
                                type: array
                                items:
                                  type: object
                          deliverables:
                            type: array
                            items:
                              type: string
                          constraints:
                            type: array
                            items:
                              type: string
                          assumptions:
                            type: array
                            items:
                              type: string
                          risks:
                            type: array
                            items:
                              type: string
                      step2_pricing_focused:
                        type: object
                        description: Pricing calculator specific data filtered from complete analysis
                        properties:
                          requirementsComplexity:
                            type: object
                            properties:
                              level:
                                type: string
                                enum: [low, medium, high, very_high]
                              factors:
                                type: array
                                items:
                                  type: string
                          projectOverview:
                            type: object
                            properties:
                              type:
                                type: string
                              scope:
                                type: string
                              complexity:
                                type: string
                          deadlineUrgency:
                            type: object
                            properties:
                              urgency:
                                type: string
                                enum: [low, medium, high, urgent]
                              timeframe:
                                type: string
                              factors:
                                type: array
                                items:
                                  type: string
                          budgetInfo:
                            type: object
                            properties:
                              hasBudget:
                                type: boolean
                              range:
                                type: string
                              flexibility:
                                type: string
                          clientProjectInfo:
                            type: object
                            properties:
                              industry:
                                type: string
                              size:
                                type: string
                              experience:
                                type: string
                          pricingFactors:
                            type: array
                            items:
                              type: string
                  processing:
                    type: object
                    properties:
                      method:
                        type: string
                        example: "two-step"
                      step1:
                        type: string
                        example: "Complete document analysis"
                      step2:
                        type: string
                        example: "Pricing-focused filtering"
                      model_used:
                        type: string
                        example: "gemini-2.5-pro"
                      processing_time:
                        type: string
                        example: "45.2s"
                  metadata:
                    type: object
                    properties:
                      fileName:
                        type: string
                        example: "client_proposal.pdf"
                      fileSize:
                        type: number
                        example: 2048576
                      pagesProcessed:
                        type: number
                        example: 12
                      processedAt:
                        type: string
                        format: date-time
                      userId:
                        type: string
                        example: "anonymous"
                      extractionMethod:
                        type: string
                        example: "direct-pdf-text"
        '400':
          description: No file uploaded or invalid file type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Processing failed or GenAI API error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/proposals/history:
    get:
      tags:
        - Proposal Extraction
      summary: Get extraction history
      description: |
        Retrieve history of PDF extractions. Currently returns empty array.
        Authentication is optional - user ID will be set to 'anonymous' if not authenticated.
      responses:
        '200':
          description: History retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                    example: []
                  message:
                    type: string
                    example: "Extraction history retrieved successfully"
                  userId:
                    type: string
                    example: "anonymous"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/proposals/test-gemini:
    get:
      tags:
        - Proposal Extraction
      summary: Test GenAI API connection and models
      description: |
        Test the connection to Google's GenAI API using @google/genai library.
        Tests multiple Gemini models: 2.5 Pro, 2.5 Flash, 1.5 Pro, 1.5 Flash, Pro.
        Returns detailed information about working models and API status.
        Authentication is optional - user ID will be set to 'anonymous' if not authenticated.
      responses:
        '200':
          description: GenAI API connection successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Google GenAI connection successful! 3 model(s) working."
                  data:
                    type: object
                    properties:
                      results:
                        type: array
                        items:
                          type: object
                          properties:
                            model:
                              type: string
                              example: "gemini-2.5-pro"
                            success:
                              type: boolean
                              example: true
                            response:
                              type: string
                              example: "Hello! I'm Gemini, ready to help with AI tasks."
                            error:
                              type: string
                              nullable: true
                        example:
                          - model: "gemini-2.5-pro"
                            success: true
                            response: "Hello! I'm Gemini, ready to help with AI tasks."
                            error: null
                          - model: "gemini-2.5-flash"
                            success: true
                            response: "Hello! I'm Gemini Flash, ready for quick responses."
                            error: null
                          - model: "gemini-1.5-pro"
                            success: false
                            response: null
                            error: "Quota exceeded"
                      workingModels:
                        type: array
                        items:
                          type: string
                        example: ["gemini-2.5-pro", "gemini-2.5-flash"]
                      apiKeyConfigured:
                        type: boolean
                        example: true
                      library:
                        type: string
                        example: "@google/genai"
                      userId:
                        type: string
                        example: "anonymous"
                      testedAt:
                        type: string
                        format: date-time
                        example: "2024-01-26T10:15:30.000Z"
        '500':
          description: GenAI API connection failed or API key missing
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Google GenAI connection failed"
                  error:
                    type: string
                    example: "API key not configured"
                  data:
                    type: object
                    properties:
                      apiKeyConfigured:
                        type: boolean
                        example: false
                      library:
                        type: string
                        example: "@google/genai"

  # ==================== TEMPLATE ENDPOINTS ====================
  /api/templates:
    get:
      summary: Get all templates
      description: Retrieve all available portfolio templates with optional filtering
      tags:
        - Templates
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: Filter by template category
        - in: query
          name: isPremium
          schema:
            type: boolean
          description: Filter by premium status
        - in: query
          name: isActive
          schema:
            type: boolean
          description: Filter by active status
      responses:
        '200':
          description: Templates retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  count:
                    type: integer
                    example: 5
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Template'
    post:
      summary: Create new template (Admin only)
      description: Create a new portfolio template
      tags:
        - Templates
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                templateId:
                  type: string
                  example: "modern-portfolio"
                name:
                  type: string
                  example: "Modern Portfolio"
                description:
                  type: string
                category:
                  type: string
                schema:
                  type: object
                isPremium:
                  type: boolean
      responses:
        '201':
          description: Template created successfully
        '401':
          description: Unauthorized
        '403':
          description: Admin access required

  /api/templates/categories:
    get:
      summary: Get template categories
      description: Retrieve all available template categories
      tags:
        - Templates
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: string
                    example: ["modern", "minimal", "creative", "professional"]

  /api/templates/default:
    get:
      summary: Get default template
      description: Retrieve the default template for new portfolios
      tags:
        - Templates
      responses:
        '200':
          description: Default template retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Template'

  /api/templates/{id}:
    get:
      summary: Get template by ID
      description: Retrieve a specific template by its ID
      tags:
        - Templates
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Template ID
      responses:
        '200':
          description: Template retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Template'
        '404':
          description: Template not found
    put:
      summary: Update template (Admin only)
      description: Update an existing template
      tags:
        - Templates
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Template updated successfully
        '401':
          description: Unauthorized
        '403':
          description: Admin access required
        '404':
          description: Template not found
    delete:
      summary: Deactivate template (Admin only)
      description: Deactivate a template (soft delete)
      tags:
        - Templates
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Template deactivated successfully
        '401':
          description: Unauthorized
        '403':
          description: Admin access required

  /api/templates/{id}/schema:
    get:
      summary: Get template schema
      description: Retrieve the schema definition for a specific template
      tags:
        - Templates
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Schema retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    description: Template schema definition

  /api/templates/{id}/validate:
    post:
      summary: Validate template content
      description: Validate portfolio content against template schema
      tags:
        - Templates
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: object
                  description: Content to validate
      responses:
        '200':
          description: Validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  valid:
                    type: boolean
                  errors:
                    type: array
                    items:
                      type: object

  /api/templates/{id}/rating:
    post:
      summary: Add template rating
      description: Add or update rating for a template
      tags:
        - Templates
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  example: 5
      responses:
        '200':
          description: Rating added successfully
        '401':
          description: Unauthorized

  /api/templates/{id}/version:
    post:
      summary: Create template version (Admin only)
      description: Create a new version of an existing template
      tags:
        - Templates
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                version:
                  type: string
                  example: "2.0.0"
                schema:
                  type: object
                changelog:
                  type: string
      responses:
        '201':
          description: Version created successfully
        '401':
          description: Unauthorized
        '403':
          description: Admin access required
