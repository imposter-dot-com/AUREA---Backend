/**
 * Test Custom Subdomain Feature (Gmail-style)
 * 
 * Tests the ability for users to:
 * 1. Choose their own custom subdomain
 * 2. Get error if subdomain is taken by another user
 * 3. Update their own subdomain
 */

const BASE_URL = 'http://localhost:5000';

// Test data
let authToken;
let userId;
let portfolioId;
let user2Token;
let user2Id;

// Helper function to make API requests
async function makeRequest(endpoint, options = {}) {
  const url = `${BASE_URL}${endpoint}`;
  const headers = {
    'Content-Type': 'application/json',
    ...(authToken && { 'Authorization': `Bearer ${authToken}` }),
    ...options.headers
  };

  const response = await fetch(url, {
    ...options,
    headers
  });

  const data = await response.json();
  return { response, data };
}

// Colored console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logSection(title) {
  console.log('\n' + '='.repeat(60));
  log(title, 'bright');
  console.log('='.repeat(60) + '\n');
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, 'green');
}

function logError(message) {
  log(`‚ùå ${message}`, 'red');
}

function logInfo(message) {
  log(`‚ÑπÔ∏è  ${message}`, 'cyan');
}

function logWarning(message) {
  log(`‚ö†Ô∏è  ${message}`, 'yellow');
}

// Test counters
let testsRun = 0;
let testsPassed = 0;
let testsFailed = 0;

// Main test function
async function runTests() {
  try {
    logSection('üéØ CUSTOM SUBDOMAIN FEATURE TEST');
    log('Testing Gmail-style custom subdomain selection\n', 'bright');

    // Pre-cleanup: Remove any leftover folders AND database records from previous tests
    try {
      const { promises: fs } = await import('fs');
      const path = await import('path');
      const foldersToClean = ['jane-designer', 'my-awesome-portfolio', 'updated-portfolio-name'];
      
      // Clean folders
      for (const folder of foldersToClean) {
        const folderPath = path.join(process.cwd(), 'generated-files', folder);
        try {
          await fs.rm(folderPath, { recursive: true, force: true });
        } catch (error) {
          // Folder might not exist, that's fine
        }
      }
      
      // Also try to clean database Site records (using a temp admin-like approach)
      // Note: This assumes we have MongoDB access or an API endpoint to clean test data
      logInfo('‚úì Pre-test cleanup complete (folders)\n');
    } catch (error) {
      // Cleanup errors are non-critical
    }

    // Test 1: Register User 1
    await testRegisterUser1();
    
    // Test 2: Create Portfolio for User 1
    await testCreatePortfolio();
    
    // Test 3: Create Case Studies
    await testCreateCaseStudies();
    
    // Test 4: Publish with Auto-Generated Subdomain
    await testAutoGeneratedSubdomain();
    
    // Test 5: Publish with Custom Subdomain & Verify Case Studies
    await testCustomSubdomain();
    
    // Test 6: Register User 2
    await testRegisterUser2();
    
    // Test 7: Try to Use Same Subdomain (Should Fail)
    await testSubdomainTaken();
    
    // Test 8: User 1 Updates Their Own Subdomain
    await testUpdateOwnSubdomain();
    
    // Test 9: Cleanup
    await testCleanup();
    
    // Print summary
    printSummary();
    
  } catch (error) {
    logError(`Test execution error: ${error.message}`);
    console.error(error);
  }
}

// ============================================
// TEST 1: Register User 1
// ============================================
async function testRegisterUser1() {
  logSection('TEST 1: Register User 1');
  
  try {
    const { response, data } = await makeRequest('/api/auth/signup', {
      method: 'POST',
      body: JSON.stringify({
        name: 'Test User One',
        email: `testuser1-${Date.now()}@example.com`,
        password: 'password123'
      })
    });

    testsRun++;
    if (response.ok && data.success) {
      authToken = data.data.token;
      userId = data.data.user._id;
      testsPassed++;
      logSuccess('User 1 registered successfully');
      logInfo(`User ID: ${userId}`);
    } else {
      testsFailed++;
      logError(`Registration failed: ${data.message}`);
    }
  } catch (error) {
    testsFailed++;
    logError(`Registration error: ${error.message}`);
  }
}

// ============================================
// TEST 2: Create Portfolio
// ============================================
async function testCreatePortfolio() {
  logSection('TEST 2: Create Portfolio for User 1');
  
  try {
    const { response, data } = await makeRequest('/api/portfolios', {
      method: 'POST',
      body: JSON.stringify({
        title: 'My Custom Subdomain Portfolio',
        description: 'Testing custom subdomain feature',
        content: {
          about: {
            name: 'Jane Designer',
            title: 'Senior UX Designer'
          },
          work: {
            projects: [
              {
                id: 'project-1',
                title: 'E-Commerce Platform',
                description: 'A modern e-commerce solution',
                image: 'https://images.unsplash.com/photo-1460925895917-afdab827c52f',
                tags: ['UX Design', 'UI Design', 'E-Commerce']
              },
              {
                id: 'project-2',
                title: 'Banking Mobile App',
                description: 'Secure mobile banking application',
                image: 'https://images.unsplash.com/photo-1563986768609-322da13575f3',
                tags: ['Mobile Design', 'FinTech', 'UX']
              }
            ]
          }
        }
      })
    });

    testsRun++;
    if (response.ok && data.success) {
      portfolioId = data.data.portfolio._id;
      testsPassed++;
      logSuccess('Portfolio created successfully');
      logInfo(`Portfolio ID: ${portfolioId}`);
    } else {
      testsFailed++;
      logError(`Portfolio creation failed: ${data.message}`);
    }
  } catch (error) {
    testsFailed++;
    logError(`Portfolio creation error: ${error.message}`);
  }
}

// ============================================
// TEST 3: Create Case Studies
// ============================================
async function testCreateCaseStudies() {
  logSection('TEST 3: Create Case Studies for Portfolio');
  
  try {
    // Create first case study
    const caseStudy1 = await makeRequest('/api/case-studies', {
      method: 'POST',
      body: JSON.stringify({
        portfolioId: portfolioId,
        projectId: 'project-1',
        content: {
          hero: {
            title: 'E-Commerce Redesign',
            subtitle: 'Transforming the online shopping experience',
            coverImage: 'https://images.unsplash.com/photo-1460925895917-afdab827c52f',
            client: 'TechStore Inc',
            year: '2024',
            role: 'Lead UX Designer',
            duration: '3 months'
          },
          overview: {
            heading: 'Project Overview',
            description: 'A complete redesign of the e-commerce platform to improve user experience and increase conversion rates.',
            challenge: 'The existing platform had a high bounce rate and low conversion.',
            solution: 'Implemented a streamlined checkout process and improved product discovery.',
            results: '45% increase in conversion rate and 30% reduction in cart abandonment.'
          },
          sections: [
            {
              id: 'section-1',
              type: 'text',
              heading: 'Research Phase',
              content: 'We conducted user interviews and analyzed analytics data to identify pain points.'
            },
            {
              id: 'section-2',
              type: 'image',
              heading: 'Design System',
              content: 'Created a comprehensive design system for consistency.',
              image: 'https://images.unsplash.com/photo-1561070791-2526d30994b5'
            }
          ]
        }
      })
    });

    testsRun++;
    if (caseStudy1.response.ok && caseStudy1.data.success) {
      testsPassed++;
      logSuccess('Case Study 1 created successfully');
      logInfo(`Case Study ID: ${caseStudy1.data.data.caseStudy._id}`);
    } else {
      testsFailed++;
      logError(`Case Study 1 creation failed: ${caseStudy1.data.message || JSON.stringify(caseStudy1.data)}`);
      logError(`Status: ${caseStudy1.response.status}`);
      return;
    }

    // Create second case study
    const caseStudy2 = await makeRequest('/api/case-studies', {
      method: 'POST',
      body: JSON.stringify({
        portfolioId: portfolioId,
        projectId: 'project-2',
        content: {
          hero: {
            title: 'Mobile Banking App',
            subtitle: 'Simplifying financial management',
            coverImage: 'https://images.unsplash.com/photo-1563986768609-322da13575f3',
            client: 'FinTech Solutions',
            year: '2024',
            role: 'Product Designer',
            duration: '4 months'
          },
          overview: {
            heading: 'Project Overview',
            description: 'Designed a mobile-first banking app with focus on security and usability.',
            challenge: 'Users found existing banking apps too complex and intimidating.',
            solution: 'Created an intuitive interface with clear information hierarchy.',
            results: '4.8 star rating with over 100K downloads in first month.'
          },
          sections: [
            {
              id: 'section-1',
              type: 'text',
              heading: 'User Research',
              content: 'Conducted surveys with 500+ banking customers to understand needs.'
            }
          ]
        }
      })
    });

    testsRun++;
    if (caseStudy2.response.ok && caseStudy2.data.success) {
      testsPassed++;
      logSuccess('Case Study 2 created successfully');
      logInfo(`Case Study ID: ${caseStudy2.data.data.caseStudy._id}`);
      logSuccess('‚úì Total case studies created: 2');
    } else {
      testsFailed++;
      logError(`Case Study 2 creation failed: ${caseStudy2.data.message}`);
    }
  } catch (error) {
    testsFailed++;
    logError(`Case study creation error: ${error.message}`);
  }
}

// ============================================
// TEST 4: Auto-Generated Subdomain
// ============================================
async function testAutoGeneratedSubdomain() {
  logSection('TEST 4: Publish with Auto-Generated Subdomain');
  
  try {
    logInfo('Publishing without customSubdomain parameter...');
    
    const { response, data } = await makeRequest('/api/sites/sub-publish', {
      method: 'POST',
      body: JSON.stringify({
        portfolioId: portfolioId
      })
    });

    testsRun++;
    if (response.ok && data.success) {
      testsPassed++;
      logSuccess('Portfolio published with auto-generated subdomain');
      logInfo(`Subdomain: ${data.data.site.subdomain}`);
      logInfo(`Expected to contain: jane-designer`);
      
      if (data.data.site.subdomain.includes('jane-designer')) {
        logSuccess('Subdomain correctly generated from designer name');
      } else {
        logWarning(`Unexpected subdomain format: ${data.data.site.subdomain}`);
      }
    } else {
      testsFailed++;
      logError(`Publish failed: ${data.message}`);
    }
  } catch (error) {
    testsFailed++;
    logError(`Publish error: ${error.message}`);
  }
}

// ============================================
// TEST 5: Custom Subdomain with Case Study Verification
// ============================================
async function testCustomSubdomain() {
  logSection('TEST 5: Publish with Custom Subdomain & Verify Case Studies');
  
  try {
    const customSubdomain = `my-portfolio-${Date.now()}`;
    logInfo(`Attempting to use custom subdomain: ${customSubdomain}`);
    
    const { response, data } = await makeRequest('/api/sites/sub-publish', {
      method: 'POST',
      body: JSON.stringify({
        portfolioId: portfolioId,
        customSubdomain: customSubdomain
      })
    });

    testsRun++;
    if (response.ok && data.success) {
      testsPassed++;
      logSuccess('Portfolio published with custom subdomain');
      logInfo(`Subdomain: ${data.data.site.subdomain}`);
      logInfo(`URL: ${data.data.site.url}`);
      logSuccess('Custom subdomain correctly applied!');
      
      // Verify case study files were generated
      const { promises: fs } = await import('fs');
      const path = await import('path');
      const subdomainFolder = path.join(process.cwd(), 'generated-files', customSubdomain);
      
      try {
        // Check main portfolio file
        await fs.access(path.join(subdomainFolder, 'index.html'));
        logSuccess('‚úì index.html generated');
        
        // Check case study files
        const expectedCaseStudies = ['case-study-project-1.html', 'case-study-project-2.html'];
        let caseStudiesFound = 0;
        
        for (const caseStudyFile of expectedCaseStudies) {
          try {
            await fs.access(path.join(subdomainFolder, caseStudyFile));
            logSuccess(`‚úì ${caseStudyFile} generated`);
            caseStudiesFound++;
          } catch {
            logWarning(`${caseStudyFile} not found`);
          }
        }
        
        if (caseStudiesFound === expectedCaseStudies.length) {
          logSuccess(`‚úì All ${caseStudiesFound} case study files generated!`);
          
          // Verify case study content
          const caseStudyContent = await fs.readFile(
            path.join(subdomainFolder, 'case-study-project-1.html'), 
            'utf-8'
          );
          
          if (caseStudyContent.includes('E-Commerce Redesign')) {
            logSuccess('‚úì Case study contains correct title');
          }
          if (caseStudyContent.includes('TechStore Inc')) {
            logSuccess('‚úì Case study contains correct client name');
          }
          if (caseStudyContent.includes('45% increase in conversion')) {
            logSuccess('‚úì Case study contains correct results data');
          }
        } else {
          logWarning(`Only ${caseStudiesFound} of ${expectedCaseStudies.length} case studies found`);
        }
        
      } catch (error) {
        logWarning(`Could not verify files: ${error.message}`);
      }
    } else {
      testsFailed++;
      logError(`Publish failed: ${data.message}`);
    }
  } catch (error) {
    testsFailed++;
    logError(`Publish error: ${error.message}`);
  }
}

// ============================================
// TEST 6: Register User 2
// ============================================
async function testRegisterUser2() {
  logSection('TEST 6: Register User 2');
  
  try {
    const { response, data } = await makeRequest('/api/auth/signup', {
      method: 'POST',
      headers: { 'Authorization': '' }, // Clear auth
      body: JSON.stringify({
        name: 'Test User Two',
        email: `testuser2-${Date.now()}@example.com`,
        password: 'password123'
      })
    });

    testsRun++;
    if (response.ok && data.success) {
      user2Token = data.data.token;
      user2Id = data.data.user._id;
      testsPassed++;
      logSuccess('User 2 registered successfully');
      logInfo(`User ID: ${user2Id}`);
    } else {
      testsFailed++;
      logError(`Registration failed: ${data.message}`);
    }
  } catch (error) {
    testsFailed++;
    logError(`Registration error: ${error.message}`);
  }
}

// ============================================
// TEST 7: Subdomain Taken (Should Fail)
// ============================================
async function testSubdomainTaken() {
  logSection('TEST 7: Try to Use Subdomain Already Taken');
  
  try {
    // Get the subdomain User 1 is currently using
    const { response: getResponse, data: getData } = await makeRequest(`/api/portfolios/${portfolioId}`, {
      method: 'GET',
      headers: { 'Authorization': `Bearer ${authToken}` }
    });
    
    const takenSubdomain = getData.data.portfolio.slug;
    logInfo(`User 2 attempting to use: ${takenSubdomain}`);
    logInfo('This should FAIL with 409 Conflict...');
    
    // Create portfolio for User 2
    const { response: portfolioResponse, data: portfolioData } = await makeRequest('/api/portfolios', {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${user2Token}` },
      body: JSON.stringify({
        title: 'User 2 Portfolio',
        content: { about: { name: 'User Two' } }
      })
    });
    
    if (portfolioResponse.ok) {
      const user2PortfolioId = portfolioData.data.portfolio._id;
      
      // Try to publish with taken subdomain
      const { response, data } = await makeRequest('/api/sites/sub-publish', {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${user2Token}` },
        body: JSON.stringify({
          portfolioId: user2PortfolioId,
          customSubdomain: takenSubdomain
        })
      });

      testsRun++;
      if (response.status === 409 && !data.success) {
        testsPassed++;
        logSuccess('Correctly rejected taken subdomain!');
        logInfo(`Message: ${data.message}`);
        logInfo(`Available: ${data.available}`);
      } else if (response.ok) {
        testsFailed++;
        logError('BUG: Allowed duplicate subdomain! Should have failed.');
      } else {
        testsFailed++;
        logError(`Unexpected error: ${data.message}`);
      }
      
      // Cleanup User 2's portfolio
      await makeRequest(`/api/portfolios/${user2PortfolioId}`, {
        method: 'DELETE',
        headers: { 'Authorization': `Bearer ${user2Token}` }
      });
    }
  } catch (error) {
    testsFailed++;
    logError(`Test error: ${error.message}`);
  }
}

// ============================================
// TEST 8: Update Own Subdomain
// ============================================
async function testUpdateOwnSubdomain() {
  logSection('TEST 8: User 1 Updates Their Own Subdomain');
  
  try {
    // Get current subdomain
    const { response: getResponse, data: getData } = await makeRequest(`/api/portfolios/${portfolioId}`, {
      method: 'GET',
      headers: { 'Authorization': `Bearer ${authToken}` }
    });
    
    const oldSubdomain = getData.data.portfolio.slug;
    const newSubdomain = `new-${Date.now()}`;
    logInfo(`User 1 updating subdomain: ${oldSubdomain} ‚Üí ${newSubdomain}`);
    
    const { response, data } = await makeRequest('/api/sites/sub-publish', {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${authToken}` },
      body: JSON.stringify({
        portfolioId: portfolioId,
        customSubdomain: newSubdomain
      })
    });

    testsRun++;
    if (response.ok && data.success) {
      testsPassed++;
      logSuccess('User successfully updated their own subdomain');
      logInfo(`New subdomain: ${data.data.site.subdomain}`);
      logInfo(`New URL: ${data.data.site.url}`);
      
      if (data.data.site.subdomain === newSubdomain) {
        logSuccess('Subdomain update successful!');
        
        // Verify old folder is deleted
        const { promises: fs } = await import('fs');
        const path = await import('path');
        const oldFolder = path.join(process.cwd(), 'generated-files', oldSubdomain);
        const newFolder = path.join(process.cwd(), 'generated-files', newSubdomain);
        
        try {
          await fs.access(oldFolder);
          logWarning('Old folder still exists (should be deleted)');
        } catch {
          logSuccess('‚úì Old folder cleaned up');
        }
        
        try {
          await fs.access(newFolder);
          logSuccess('‚úì New folder created');
        } catch {
          logWarning('New folder not found');
        }
      }
    } else {
      testsFailed++;
      logError(`Update failed: ${data.message}`);
    }
  } catch (error) {
    testsFailed++;
    logError(`Update error: ${error.message}`);
  }
}

// ============================================
// TEST 9: Cleanup
// ============================================
async function testCleanup() {
  logSection('TEST 9: Cleanup Test Data');
  
  try {
    // Delete all sites for this portfolio
    const { response: sitesResponse } = await makeRequest(`/api/sites?portfolioId=${portfolioId}`, {
      method: 'DELETE',
      headers: { 'Authorization': `Bearer ${authToken}` }
    });
    
    if (sitesResponse.ok) {
      logSuccess('Sites deleted');
    }
    
    // Delete portfolio
    const { response } = await makeRequest(`/api/portfolios/${portfolioId}`, {
      method: 'DELETE',
      headers: { 'Authorization': `Bearer ${authToken}` }
    });
    
    if (response.ok) {
      logSuccess('Portfolio deleted');
    }
    
    // Clean up generated folders
    const { promises: fs } = await import('fs');
    const path = await import('path');
    
    const foldersToClean = ['jane-designer', 'my-awesome-portfolio', 'updated-portfolio-name'];
    for (const folder of foldersToClean) {
      const folderPath = path.join(process.cwd(), 'generated-files', folder);
      try {
        await fs.rm(folderPath, { recursive: true, force: true });
        logInfo(`Cleaned folder: ${folder}`);
      } catch (error) {
        // Folder might not exist, that's fine
      }
    }
    
    logInfo('Test completed - cleanup done');
    
  } catch (error) {
    logWarning(`Cleanup error: ${error.message}`);
  }
}

// ============================================
// Print Summary
// ============================================
function printSummary() {
  logSection('üìä TEST SUMMARY');
  
  log(`\nTotal Tests: ${testsRun}`, 'bright');
  log(`‚úÖ Passed: ${testsPassed}`, 'green');
  log(`‚ùå Failed: ${testsFailed}`, 'red');
  
  if (testsFailed === 0) {
    log('\nüéâ ALL TESTS PASSED!\n', 'green');
  } else {
    log(`\n‚ö†Ô∏è  SOME TESTS FAILED (${((testsPassed/testsRun)*100).toFixed(1)}% success rate)\n`, 'yellow');
  }
  
  log(`Completed: ${new Date().toLocaleString()}`, 'cyan');
  console.log('‚îÄ'.repeat(60) + '\n');
}

// Run tests
runTests();
